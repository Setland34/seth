// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package network_debug_contract

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// NetworkDebugContractAccount is an auto generated low-level Go binding around an user-defined struct.
type NetworkDebugContractAccount struct {
	Name       string
	Balance    uint64
	DailyLimit *big.Int
}

// NetworkDebugContractData is an auto generated low-level Go binding around an user-defined struct.
type NetworkDebugContractData struct {
	Name   string
	Values []*big.Int
}

// NetworkDebugContractNestedData is an auto generated low-level Go binding around an user-defined struct.
type NetworkDebugContractNestedData struct {
	Data         NetworkDebugContractData
	DynamicBytes []byte
}

// NetworkDebugContractMetaData contains all meta data concerning the NetworkDebugContract contract.
var NetworkDebugContractMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"subAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"CustomErr\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CustomErrNoValues\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"int256\",\"name\":\"a\",\"type\":\"int256\"}],\"name\":\"CallbackEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enumNetworkDebugContract.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"CurrentStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EtherReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"NoIndexEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"NoIndexEventString\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"balance\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"dailyLimit\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"structNetworkDebugContract.Account\",\"name\":\"a\",\"type\":\"tuple\"}],\"name\":\"NoIndexStructEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"}],\"name\":\"OneIndexEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"Received\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"startedBy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"dataId\",\"type\":\"string\"}],\"name\":\"ThreeIndexAndOneNonIndexedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"startedBy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"}],\"name\":\"ThreeIndexEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"startedBy\",\"type\":\"address\"}],\"name\":\"TwoIndexEvent\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"idx\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"x\",\"type\":\"int256\"}],\"name\":\"addCounter\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"value\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"alwaysRevertsAssert\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"alwaysRevertsCustomError\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"alwaysRevertsCustomErrorNoValues\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"alwaysRevertsRequire\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"callRevertFunctionInSubContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"callRevertFunctionInTheContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"x\",\"type\":\"int256\"}],\"name\":\"callbackMethod\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"name\":\"counterMap\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentStatus\",\"outputs\":[{\"internalType\":\"enumNetworkDebugContract.Status\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"emitAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"input\",\"type\":\"bytes32\"}],\"name\":\"emitBytes32\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"output\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emitFourParamMixedEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"inputVal1\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"inputVal2\",\"type\":\"string\"}],\"name\":\"emitInputs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"inputVal1\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"inputVal2\",\"type\":\"string\"}],\"name\":\"emitInputsOutputs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"first\",\"type\":\"int256\"},{\"internalType\":\"int128\",\"name\":\"second\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"third\",\"type\":\"uint256\"}],\"name\":\"emitInts\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"int128\",\"name\":\"outputVal1\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"outputVal2\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"inputVal1\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"inputVal2\",\"type\":\"string\"}],\"name\":\"emitNamedInputsOutputs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"outputVal1\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"outputVal2\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emitNamedOutputs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"outputVal1\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"outputVal2\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emitNoIndexEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emitNoIndexEventString\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emitNoIndexStructEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emitOneIndexEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emitOutputs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emitThreeIndexEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emitTwoIndexEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"data\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"idx\",\"type\":\"int256\"}],\"name\":\"getCounter\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"data\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMap\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"data\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onTokenTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pay\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"input\",\"type\":\"address[]\"}],\"name\":\"processAddressArray\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"internalType\":\"structNetworkDebugContract.Data\",\"name\":\"data\",\"type\":\"tuple\"}],\"name\":\"processDynamicData\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"internalType\":\"structNetworkDebugContract.Data\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"internalType\":\"structNetworkDebugContract.Data[3]\",\"name\":\"data\",\"type\":\"tuple[3]\"}],\"name\":\"processFixedDataArray\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"internalType\":\"structNetworkDebugContract.Data[2]\",\"name\":\"\",\"type\":\"tuple[2]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"internalType\":\"structNetworkDebugContract.Data\",\"name\":\"data\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"dynamicBytes\",\"type\":\"bytes\"}],\"internalType\":\"structNetworkDebugContract.NestedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"name\":\"processNestedData\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"internalType\":\"structNetworkDebugContract.Data\",\"name\":\"data\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"dynamicBytes\",\"type\":\"bytes\"}],\"internalType\":\"structNetworkDebugContract.NestedData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"internalType\":\"structNetworkDebugContract.Data\",\"name\":\"data\",\"type\":\"tuple\"}],\"name\":\"processNestedData\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"internalType\":\"structNetworkDebugContract.Data\",\"name\":\"data\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"dynamicBytes\",\"type\":\"bytes\"}],\"internalType\":\"structNetworkDebugContract.NestedData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"input\",\"type\":\"uint256[]\"}],\"name\":\"processUintArray\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"idx\",\"type\":\"int256\"}],\"name\":\"resetCounter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"x\",\"type\":\"int256\"}],\"name\":\"set\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"value\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"x\",\"type\":\"int256\"}],\"name\":\"setMap\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"value\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enumNetworkDebugContract.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"setStatus\",\"outputs\":[{\"internalType\":\"enumNetworkDebugContract.Status\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"storedData\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"storedDataMap\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subContract\",\"outputs\":[{\"internalType\":\"contractNetworkDebugSubContract\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"x\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"y\",\"type\":\"int256\"}],\"name\":\"trace\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"x\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"y\",\"type\":\"int256\"}],\"name\":\"traceDifferent\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"x\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"y\",\"type\":\"int256\"}],\"name\":\"traceSubWithCallback\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"x\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"y\",\"type\":\"int256\"}],\"name\":\"traceYetDifferent\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Bin: "0x60806040523480156200001157600080fd5b50604051620034c2380380620034c28339818101604052810190620000379190620000e9565b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200011b565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000b18262000084565b9050919050565b620000c381620000a4565b8114620000cf57600080fd5b50565b600081519050620000e381620000b8565b92915050565b6000602082840312156200010257620001016200007f565b5b60006200011284828501620000d2565b91505092915050565b613397806200012b6000396000f3fe60806040526004361061028c5760003560e01c80637f12881c1161015a578063b600141f116100c1578063e8116e281161007a578063e8116e2814610a2f578063ec5c3ede14610a6c578063ef8a923514610aa9578063f3396bd914610ad4578063f499af2a14610afd578063fbcb8d0714610b3a576102cc565b8063b600141f1461091e578063c0d06d8914610935578063c2124b2214610960578063d7a8020514610977578063e1111f79146109b5578063e5c19b2d146109f2576102cc565b806395a81a4c1161011357806395a81a4c1461082057806399adad2e146108375780639e09965214610874578063a4c0ed36146108b3578063aa3fdcf4146108dc578063ad3de14c146108f3576102cc565b80637f12881c146107235780637fdc8fe11461076057806381b375a01461079d5780638db611be146107c65780638f856296146107f25780639349d00b14610809576102cc565b80633837a75e116101fe5780635e9c80d6116101b75780635e9c80d61461064a5780636284117d1461066157806362c270e11461069e5780636d4ce63c146106b55780637014c81d146106e0578063788c47721461070c576102cc565b80633837a75e146104db5780633e41f1351461051857806345f0c9e61461055557806348ad9fe81461059357806358379d71146105d05780635921483f1461060d576102cc565b8063235157601161025057806323515760146103a5578063256560d5146103e25780632a1afcd9146103f95780632e49d78b1461042457806330985bcc1461046157806333311ef31461049e576102cc565b806306595f751461030757806311b3c4781461031e57806312d91233146103475780631b9265b8146103845780631e31d0a81461038e576102cc565b366102cc577f59e04c3f0d44b7caf6e8ef854b61d9a51cf1960d7a88ff6356cc5e946b4b583233346040516102c2929190611a20565b60405180910390a1005b7f1e57e3bb474320be3d2c77138f75b7c3941292d647f5f9634e33a8e94e0e069b33346040516102fd929190611a5c565b60405180910390a1005b34801561031357600080fd5b5061031c610b77565b005b34801561032a57600080fd5b5061034560048036038101906103409190611ac5565b610bba565b005b34801561035357600080fd5b5061036e60048036038101906103699190611c5e565b610c4d565b60405161037b9190611d65565b60405180910390f35b61038c610d0c565b005b34801561039a57600080fd5b506103a3610d0e565b005b3480156103b157600080fd5b506103cc60048036038101906103c79190611dbd565b610d55565b6040516103d99190611e0c565b60405180910390f35b3480156103ee57600080fd5b506103f7610d8a565b005b34801561040557600080fd5b5061040e610d9b565b60405161041b9190611e0c565b60405180910390f35b34801561043057600080fd5b5061044b60048036038101906104469190611e4c565b610da1565b6040516104589190611ef0565b60405180910390f35b34801561046d57600080fd5b5061048860048036038101906104839190611dbd565b610e23565b6040516104959190611e0c565b60405180910390f35b3480156104aa57600080fd5b506104c560048036038101906104c09190611f41565b610f05565b6040516104d29190611f7d565b60405180910390f35b3480156104e757600080fd5b5061050260048036038101906104fd9190611dbd565b610f0f565b60405161050f9190611e0c565b60405180910390f35b34801561052457600080fd5b5061053f600480360381019061053a9190611dbd565b61101a565b60405161054c9190611e0c565b60405180910390f35b34801561056157600080fd5b5061057c6004803603810190610577919061204d565b611115565b60405161058a929190612117565b60405180910390f35b34801561059f57600080fd5b506105ba60048036038101906105b59190612173565b611126565b6040516105c79190611e0c565b60405180910390f35b3480156105dc57600080fd5b506105f760048036038101906105f29190611dbd565b61113e565b6040516106049190611e0c565b60405180910390f35b34801561061957600080fd5b50610634600480360381019061062f91906121a0565b611239565b6040516106419190611e0c565b60405180910390f35b34801561065657600080fd5b5061065f611256565b005b34801561066d57600080fd5b50610688600480360381019061068391906121a0565b611297565b6040516106959190611e0c565b60405180910390f35b3480156106aa57600080fd5b506106b36112af565b005b3480156106c157600080fd5b506106ca611343565b6040516106d79190611e0c565b60405180910390f35b3480156106ec57600080fd5b506106f561134c565b604051610703929190612117565b60405180910390f35b34801561071857600080fd5b50610721611391565b005b34801561072f57600080fd5b5061074a600480360381019061074591906121f1565b6113c8565b60405161075791906123d0565b60405180910390f35b34801561076c57600080fd5b5061078760048036038101906107829190612411565b6113e1565b604051610794919061261e565b60405180910390f35b3480156107a957600080fd5b506107c460048036038101906107bf919061204d565b6113ea565b005b3480156107d257600080fd5b506107db6113ee565b6040516107e9929190612117565b60405180910390f35b3480156107fe57600080fd5b50610807611433565b005b34801561081557600080fd5b5061081e611463565b005b34801561082c57600080fd5b5061083561146d565b005b34801561084357600080fd5b5061085e60048036038101906108599190612662565b6114a6565b60405161086b9190612761565b60405180910390f35b34801561088057600080fd5b5061089b600480360381019061089691906127bc565b611551565b6040516108aa9392919061281e565b60405180910390f35b3480156108bf57600080fd5b506108da60048036038101906108d591906128b0565b611568565b005b3480156108e857600080fd5b506108f16115a9565b005b3480156108ff57600080fd5b506109086115f2565b6040516109159190611e0c565b60405180910390f35b34801561092a57600080fd5b50610933611639565b005b34801561094157600080fd5b5061094a61166b565b6040516109579190612983565b60405180910390f35b34801561096c57600080fd5b50610975611691565b005b34801561098357600080fd5b5061099e6004803603810190610999919061204d565b6116e3565b6040516109ac929190612117565b60405180910390f35b3480156109c157600080fd5b506109dc60048036038101906109d79190612a61565b6116f4565b6040516109e99190612b68565b60405180910390f35b3480156109fe57600080fd5b50610a196004803603810190610a1491906121a0565b6116fe565b604051610a269190611e0c565b60405180910390f35b348015610a3b57600080fd5b50610a566004803603810190610a5191906121a0565b61170f565b604051610a639190611e0c565b60405180910390f35b348015610a7857600080fd5b50610a936004803603810190610a8e9190612173565b61175d565b604051610aa09190612b8a565b60405180910390f35b348015610ab557600080fd5b50610abe611767565b604051610acb9190611ef0565b60405180910390f35b348015610ae057600080fd5b50610afb6004803603810190610af691906121a0565b61177a565b005b348015610b0957600080fd5b50610b246004803603810190610b1f9190612411565b611796565b604051610b3191906123d0565b60405180910390f35b348015610b4657600080fd5b50610b616004803603810190610b5c91906121a0565b6118cb565b604051610b6e9190611e0c565b60405180910390f35b6000610bb8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610baf90612bf1565b60405180910390fd5b565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166311abb00283836040518363ffffffff1660e01b8152600401610c17929190612c11565b600060405180830381600087803b158015610c3157600080fd5b505af1158015610c45573d6000803e3d6000fd5b505050505050565b60606000825167ffffffffffffffff811115610c6c57610c6b611b1b565b5b604051908082528060200260200182016040528015610c9a5781602001602082028036833780820191505090505b50905060005b8351811015610d02576001848281518110610cbe57610cbd612c3a565b5b6020026020010151610cd09190612c98565b828281518110610ce357610ce2612c3a565b5b6020026020010181815250508080610cfa90612ccc565b915050610ca0565b5080915050919050565b565b3373ffffffffffffffffffffffffffffffffffffffff1660017f33b47a1cd66813164ec00800d74296f57415217c22505ee380594a712936a0b560405160405180910390a3565b600081600260008581526020019081526020016000206000828254610d7a9190612d14565b9250508190555081905092915050565b6000610d9957610d98612d58565b5b565b60005481565b600081600360146101000a81548160ff02191690836003811115610dc857610dc7611e79565b5b0217905550600360149054906101000a900460ff166003811115610def57610dee611e79565b5b7fbea054406fdf249b05d1aef1b5f848d62d902d94389fca702b2d8337677c359a60405160405180910390a2819050919050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663047c4425836040518263ffffffff1660e01b8152600401610e809190611e0c565b6020604051808303816000875af1158015610e9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec39190612d9c565b50827feace1be0b97ec11f959499c07b9f60f0cc47bf610b28fda8fb0e970339cf3b3560405160405180910390a28183610efd9190612d14565b905092915050565b6000819050919050565b6000600282610f1e9190612d14565b9150600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fa8fca7a84846040518363ffffffff1660e01b8152600401610f7d929190612dc9565b6020604051808303816000875af1158015610f9c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fc09190612d9c565b503373ffffffffffffffffffffffffffffffffffffffff1660017f33b47a1cd66813164ec00800d74296f57415217c22505ee380594a712936a0b560405160405180910390a381836110129190612d14565b905092915050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633e41f13584846040518363ffffffff1660e01b8152600401611079929190612dc9565b6020604051808303816000875af1158015611098573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110bc9190612d9c565b503373ffffffffffffffffffffffffffffffffffffffff16827f33b47a1cd66813164ec00800d74296f57415217c22505ee380594a712936a0b560405160405180910390a3818361110d9190612d14565b905092915050565b600060608383915091509250929050565b60016020528060005260406000206000915090505481565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633e41f13584846040518363ffffffff1660e01b815260040161119d929190612dc9565b6020604051808303816000875af11580156111bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111e09190612d9c565b503373ffffffffffffffffffffffffffffffffffffffff16827f33b47a1cd66813164ec00800d74296f57415217c22505ee380594a712936a0b560405160405180910390a381836112319190612d14565b905092915050565b600060026000838152602001908152602001600020549050919050565b600c60156040517f4a2eaf7e00000000000000000000000000000000000000000000000000000000815260040161128e929190612e68565b60405180910390fd5b60026020528060005260406000206000915090505481565b7febe3ff7e2071d351bf2e65b4fccd24e3ae99485f02468f1feecf7d64dc04418860405180606001604052806040518060400160405280600481526020017f4a6f686e000000000000000000000000000000000000000000000000000000008152508152602001600567ffffffffffffffff168152602001600a8152506040516113399190612f04565b60405180910390a1565b60008054905090565b60006060617a696040518060400160405280600a81526020017f6f757470757456616c3100000000000000000000000000000000000000000000815250915091509091565b7f25b7adba1b046a19379db4bc06aa1f2e71604d7b599a0ee8783d58110f00e16a6040516113be90612f72565b60405180910390a1565b6113d0611902565b816113da9061314d565b9050919050565b36819050919050565b5050565b60006060617a696040518060400160405280600a81526020017f6f757470757456616c3100000000000000000000000000000000000000000000815250915091509091565b60537feace1be0b97ec11f959499c07b9f60f0cc47bf610b28fda8fb0e970339cf3b3560405160405180910390a2565b61146b611256565b565b7f33bc9bae48dbe1e057f264b3fc6a1dacdcceacb3ba28d937231c70e068a02f1c3360405161149c9190612b8a565b60405180910390a1565b6114ae611922565b6114b6611922565b826000600381106114ca576114c9612c3a565b5b6020028101906114da919061316f565b6114e390613197565b816000600281106114f7576114f6612c3a565b5b60200201819052508260016003811061151357611512612c3a565b5b602002810190611523919061316f565b61152c90613197565b816001600281106115405761153f612c3a565b5b602002018190525080915050919050565b600080600085858592509250925093509350939050565b606460656040517f4a2eaf7e0000000000000000000000000000000000000000000000000000000081526004016115a0929190613220565b60405180910390fd5b60033373ffffffffffffffffffffffffffffffffffffffff1660017f5660e8f93f0146f45abcd659e026b75995db50053cbbca4d7f365934ade68bf360405160405180910390a4565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905090565b6040517fa0c2d2db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60033373ffffffffffffffffffffffffffffffffffffffff1660027f56c2ea44ba516098cee0c181dd9d8db262657368b6e911e83ae0ccfae806c73d6040516116d990613295565b60405180910390a4565b600060608383915091509250929050565b6060819050919050565b600081600081905550819050919050565b600081600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550819050919050565b6000819050919050565b600360149054906101000a900460ff1681565b6000600260008381526020019081526020016000208190555050565b61179e611902565b60008280600001906117b091906132b5565b6040516020016117c1929190613348565b6040516020818303038152906040528051906020012090506000602067ffffffffffffffff8111156117f6576117f5611b1b565b5b6040519080825280601f01601f1916602001820160405280156118285781602001600182028036833780820191505090505b50905060005b60208110156118a35782816020811061184a57611849612c3a565b5b1a60f81b82828151811061186157611860612c3a565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350808061189b90612ccc565b91505061182e565b506040518060400160405280856118b990613197565b81526020018281525092505050919050565b6000817fb16dba9242e1aa07ccc47228094628f72c8cc9699ee45d5bc8d67b84d3038c6860405160405180910390a2819050919050565b604051806040016040528061191561194f565b8152602001606081525090565b60405180604001604052806002905b61193961194f565b8152602001906001900390816119315790505090565b604051806040016040528060608152602001606081525090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061199482611969565b9050919050565b6119a481611989565b82525050565b6000819050919050565b6119bd816119aa565b82525050565b600082825260208201905092915050565b7f5265636569766564204574686572000000000000000000000000000000000000600082015250565b6000611a0a600e836119c3565b9150611a15826119d4565b602082019050919050565b6000606082019050611a35600083018561199b565b611a4260208301846119b4565b8181036040830152611a53816119fd565b90509392505050565b6000604082019050611a71600083018561199b565b611a7e60208301846119b4565b9392505050565b6000604051905090565b600080fd5b600080fd5b611aa2816119aa565b8114611aad57600080fd5b50565b600081359050611abf81611a99565b92915050565b60008060408385031215611adc57611adb611a8f565b5b6000611aea85828601611ab0565b9250506020611afb85828601611ab0565b9150509250929050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611b5382611b0a565b810181811067ffffffffffffffff82111715611b7257611b71611b1b565b5b80604052505050565b6000611b85611a85565b9050611b918282611b4a565b919050565b600067ffffffffffffffff821115611bb157611bb0611b1b565b5b602082029050602081019050919050565b600080fd5b6000611bda611bd584611b96565b611b7b565b90508083825260208201905060208402830185811115611bfd57611bfc611bc2565b5b835b81811015611c265780611c128882611ab0565b845260208401935050602081019050611bff565b5050509392505050565b600082601f830112611c4557611c44611b05565b5b8135611c55848260208601611bc7565b91505092915050565b600060208284031215611c7457611c73611a8f565b5b600082013567ffffffffffffffff811115611c9257611c91611a94565b5b611c9e84828501611c30565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b611cdc816119aa565b82525050565b6000611cee8383611cd3565b60208301905092915050565b6000602082019050919050565b6000611d1282611ca7565b611d1c8185611cb2565b9350611d2783611cc3565b8060005b83811015611d58578151611d3f8882611ce2565b9750611d4a83611cfa565b925050600181019050611d2b565b5085935050505092915050565b60006020820190508181036000830152611d7f8184611d07565b905092915050565b6000819050919050565b611d9a81611d87565b8114611da557600080fd5b50565b600081359050611db781611d91565b92915050565b60008060408385031215611dd457611dd3611a8f565b5b6000611de285828601611da8565b9250506020611df385828601611da8565b9150509250929050565b611e0681611d87565b82525050565b6000602082019050611e216000830184611dfd565b92915050565b60048110611e3457600080fd5b50565b600081359050611e4681611e27565b92915050565b600060208284031215611e6257611e61611a8f565b5b6000611e7084828501611e37565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60048110611eb957611eb8611e79565b5b50565b6000819050611eca82611ea8565b919050565b6000611eda82611ebc565b9050919050565b611eea81611ecf565b82525050565b6000602082019050611f056000830184611ee1565b92915050565b6000819050919050565b611f1e81611f0b565b8114611f2957600080fd5b50565b600081359050611f3b81611f15565b92915050565b600060208284031215611f5757611f56611a8f565b5b6000611f6584828501611f2c565b91505092915050565b611f7781611f0b565b82525050565b6000602082019050611f926000830184611f6e565b92915050565b600080fd5b600067ffffffffffffffff821115611fb857611fb7611b1b565b5b611fc182611b0a565b9050602081019050919050565b82818337600083830152505050565b6000611ff0611feb84611f9d565b611b7b565b90508281526020810184848401111561200c5761200b611f98565b5b612017848285611fce565b509392505050565b600082601f83011261203457612033611b05565b5b8135612044848260208601611fdd565b91505092915050565b6000806040838503121561206457612063611a8f565b5b600061207285828601611ab0565b925050602083013567ffffffffffffffff81111561209357612092611a94565b5b61209f8582860161201f565b9150509250929050565b600081519050919050565b60005b838110156120d25780820151818401526020810190506120b7565b60008484015250505050565b60006120e9826120a9565b6120f381856119c3565b93506121038185602086016120b4565b61210c81611b0a565b840191505092915050565b600060408201905061212c60008301856119b4565b818103602083015261213e81846120de565b90509392505050565b61215081611989565b811461215b57600080fd5b50565b60008135905061216d81612147565b92915050565b60006020828403121561218957612188611a8f565b5b60006121978482850161215e565b91505092915050565b6000602082840312156121b6576121b5611a8f565b5b60006121c484828501611da8565b91505092915050565b600080fd5b6000604082840312156121e8576121e76121cd565b5b81905092915050565b60006020828403121561220757612206611a8f565b5b600082013567ffffffffffffffff81111561222557612224611a94565b5b612231848285016121d2565b91505092915050565b600082825260208201905092915050565b6000612256826120a9565b612260818561223a565b93506122708185602086016120b4565b61227981611b0a565b840191505092915050565b600082825260208201905092915050565b60006122a082611ca7565b6122aa8185612284565b93506122b583611cc3565b8060005b838110156122e65781516122cd8882611ce2565b97506122d883611cfa565b9250506001810190506122b9565b5085935050505092915050565b60006040830160008301518482036000860152612310828261224b565b9150506020830151848203602086015261232a8282612295565b9150508091505092915050565b600081519050919050565b600082825260208201905092915050565b600061235e82612337565b6123688185612342565b93506123788185602086016120b4565b61238181611b0a565b840191505092915050565b600060408301600083015184820360008601526123a982826122f3565b915050602083015184820360208601526123c38282612353565b9150508091505092915050565b600060208201905081810360008301526123ea818461238c565b905092915050565b600060408284031215612408576124076121cd565b5b81905092915050565b60006020828403121561242757612426611a8f565b5b600082013567ffffffffffffffff81111561244557612444611a94565b5b612451848285016123f2565b91505092915050565b600080fd5b600080fd5b600080fd5b6000808335600160200384360303811261248657612485612464565b5b83810192508235915060208301925067ffffffffffffffff8211156124ae576124ad61245a565b5b6001820236038313156124c4576124c361245f565b5b509250929050565b60006124d8838561223a565b93506124e5838584611fce565b6124ee83611b0a565b840190509392505050565b6000808335600160200384360303811261251657612515612464565b5b83810192508235915060208301925067ffffffffffffffff82111561253e5761253d61245a565b5b6020820236038313156125545761255361245f565b5b509250929050565b600080fd5b82818337505050565b60006125768385612284565b93507f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8311156125a9576125a861255c565b5b6020830292506125ba838584612561565b82840190509392505050565b6000604083016125d96000840184612469565b85830360008701526125ec8382846124cc565b925050506125fd60208401846124f9565b858303602087015261261083828461256a565b925050508091505092915050565b6000602082019050818103600083015261263881846125c6565b905092915050565b60008190508260206003028201111561265c5761265b611bc2565b5b92915050565b60006020828403121561267857612677611a8f565b5b600082013567ffffffffffffffff81111561269657612695611a94565b5b6126a284828501612640565b91505092915050565b600060029050919050565b600081905092915050565b6000819050919050565b60006126d783836122f3565b905092915050565b6000602082019050919050565b60006126f7826126ab565b61270181856126b6565b935083602082028501612713856126c1565b8060005b8581101561274f578484038952815161273085826126cb565b945061273b836126df565b925060208a01995050600181019050612717565b50829750879550505050505092915050565b6000602082019050818103600083015261277b81846126ec565b905092915050565b600081600f0b9050919050565b61279981612783565b81146127a457600080fd5b50565b6000813590506127b681612790565b92915050565b6000806000606084860312156127d5576127d4611a8f565b5b60006127e386828701611da8565b93505060206127f4868287016127a7565b925050604061280586828701611ab0565b9150509250925092565b61281881612783565b82525050565b60006060820190506128336000830186611dfd565b612840602083018561280f565b61284d60408301846119b4565b949350505050565b600080fd5b60008083601f8401126128705761286f611b05565b5b8235905067ffffffffffffffff81111561288d5761288c612855565b5b6020830191508360018202830111156128a9576128a8611bc2565b5b9250929050565b600080600080606085870312156128ca576128c9611a8f565b5b60006128d88782880161215e565b94505060206128e987828801611ab0565b935050604085013567ffffffffffffffff81111561290a57612909611a94565b5b6129168782880161285a565b925092505092959194509250565b6000819050919050565b600061294961294461293f84611969565b612924565b611969565b9050919050565b600061295b8261292e565b9050919050565b600061296d82612950565b9050919050565b61297d81612962565b82525050565b60006020820190506129986000830184612974565b92915050565b600067ffffffffffffffff8211156129b9576129b8611b1b565b5b602082029050602081019050919050565b60006129dd6129d88461299e565b611b7b565b90508083825260208201905060208402830185811115612a00576129ff611bc2565b5b835b81811015612a295780612a15888261215e565b845260208401935050602081019050612a02565b5050509392505050565b600082601f830112612a4857612a47611b05565b5b8135612a588482602086016129ca565b91505092915050565b600060208284031215612a7757612a76611a8f565b5b600082013567ffffffffffffffff811115612a9557612a94611a94565b5b612aa184828501612a33565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b612adf81611989565b82525050565b6000612af18383612ad6565b60208301905092915050565b6000602082019050919050565b6000612b1582612aaa565b612b1f8185612ab5565b9350612b2a83612ac6565b8060005b83811015612b5b578151612b428882612ae5565b9750612b4d83612afd565b925050600181019050612b2e565b5085935050505092915050565b60006020820190508181036000830152612b828184612b0a565b905092915050565b6000602082019050612b9f600083018461199b565b92915050565b7f616c7761797320726576657274206572726f7200000000000000000000000000600082015250565b6000612bdb6013836119c3565b9150612be682612ba5565b602082019050919050565b60006020820190508181036000830152612c0a81612bce565b9050919050565b6000604082019050612c2660008301856119b4565b612c3360208301846119b4565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612ca3826119aa565b9150612cae836119aa565b9250828201905080821115612cc657612cc5612c69565b5b92915050565b6000612cd7826119aa565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612d0957612d08612c69565b5b600182019050919050565b6000612d1f82611d87565b9150612d2a83611d87565b925082820190508281121560008312168382126000841215161715612d5257612d51612c69565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b600081519050612d9681611d91565b92915050565b600060208284031215612db257612db1611a8f565b5b6000612dc084828501612d87565b91505092915050565b6000604082019050612dde6000830185611dfd565b612deb6020830184611dfd565b9392505050565b6000819050919050565b6000612e17612e12612e0d84612df2565b612924565b6119aa565b9050919050565b612e2781612dfc565b82525050565b6000819050919050565b6000612e52612e4d612e4884612e2d565b612924565b6119aa565b9050919050565b612e6281612e37565b82525050565b6000604082019050612e7d6000830185612e1e565b612e8a6020830184612e59565b9392505050565b600067ffffffffffffffff82169050919050565b612eae81612e91565b82525050565b60006060830160008301518482036000860152612ed1828261224b565b9150506020830151612ee66020860182612ea5565b506040830151612ef96040860182611cd3565b508091505092915050565b60006020820190508181036000830152612f1e8184612eb4565b905092915050565b7f6d79537472696e67000000000000000000000000000000000000000000000000600082015250565b6000612f5c6008836119c3565b9150612f6782612f26565b602082019050919050565b60006020820190508181036000830152612f8b81612f4f565b9050919050565b600080fd5b600080fd5b600060408284031215612fb257612fb1612f92565b5b612fbc6040611b7b565b9050600082013567ffffffffffffffff811115612fdc57612fdb612f97565b5b612fe88482850161201f565b600083015250602082013567ffffffffffffffff81111561300c5761300b612f97565b5b61301884828501611c30565b60208301525092915050565b600067ffffffffffffffff82111561303f5761303e611b1b565b5b61304882611b0a565b9050602081019050919050565b600061306861306384613024565b611b7b565b90508281526020810184848401111561308457613083611f98565b5b61308f848285611fce565b509392505050565b600082601f8301126130ac576130ab611b05565b5b81356130bc848260208601613055565b91505092915050565b6000604082840312156130db576130da612f92565b5b6130e56040611b7b565b9050600082013567ffffffffffffffff81111561310557613104612f97565b5b61311184828501612f9c565b600083015250602082013567ffffffffffffffff81111561313557613134612f97565b5b61314184828501613097565b60208301525092915050565b600061315936836130c5565b9050919050565b600080fd5b600080fd5b600080fd5b60008235600160400383360303811261318b5761318a613160565b5b80830191505092915050565b60006131a33683612f9c565b9050919050565b6000819050919050565b60006131cf6131ca6131c5846131aa565b612924565b6119aa565b9050919050565b6131df816131b4565b82525050565b6000819050919050565b600061320a613205613200846131e5565b612924565b6119aa565b9050919050565b61321a816131ef565b82525050565b600060408201905061323560008301856131d6565b6132426020830184613211565b9392505050565b7f736f6d6520696400000000000000000000000000000000000000000000000000600082015250565b600061327f6007836119c3565b915061328a82613249565b602082019050919050565b600060208201905081810360008301526132ae81613272565b9050919050565b600080833560016020038436030381126132d2576132d1613160565b5b80840192508235915067ffffffffffffffff8211156132f4576132f3613165565b5b6020830192506001820236038313156133105761330f61316a565b5b509250929050565b600081905092915050565b600061332f8385613318565b935061333c838584611fce565b82840190509392505050565b6000613355828486613323565b9150819050939250505056fea2646970667358221220dc16dcd20c7af4f539a58c96a664274d4c0fc03491d985f587a4b31d25c9774364736f6c63430008130033",
}

// NetworkDebugContractABI is the input ABI used to generate the binding from.
// Deprecated: Use NetworkDebugContractMetaData.ABI instead.
var NetworkDebugContractABI = NetworkDebugContractMetaData.ABI

// NetworkDebugContractBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use NetworkDebugContractMetaData.Bin instead.
var NetworkDebugContractBin = NetworkDebugContractMetaData.Bin

// DeployNetworkDebugContract deploys a new Ethereum contract, binding an instance of NetworkDebugContract to it.
func DeployNetworkDebugContract(auth *bind.TransactOpts, backend bind.ContractBackend, subAddr common.Address) (common.Address, *types.Transaction, *NetworkDebugContract, error) {
	parsed, err := NetworkDebugContractMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(NetworkDebugContractBin), backend, subAddr)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &NetworkDebugContract{NetworkDebugContractCaller: NetworkDebugContractCaller{contract: contract}, NetworkDebugContractTransactor: NetworkDebugContractTransactor{contract: contract}, NetworkDebugContractFilterer: NetworkDebugContractFilterer{contract: contract}}, nil
}

// NetworkDebugContract is an auto generated Go binding around an Ethereum contract.
type NetworkDebugContract struct {
	NetworkDebugContractCaller     // Read-only binding to the contract
	NetworkDebugContractTransactor // Write-only binding to the contract
	NetworkDebugContractFilterer   // Log filterer for contract events
}

// NetworkDebugContractCaller is an auto generated read-only Go binding around an Ethereum contract.
type NetworkDebugContractCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NetworkDebugContractTransactor is an auto generated write-only Go binding around an Ethereum contract.
type NetworkDebugContractTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NetworkDebugContractFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type NetworkDebugContractFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NetworkDebugContractSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type NetworkDebugContractSession struct {
	Contract     *NetworkDebugContract // Generic contract binding to set the session for
	CallOpts     bind.CallOpts         // Call options to use throughout this session
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// NetworkDebugContractCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type NetworkDebugContractCallerSession struct {
	Contract *NetworkDebugContractCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts               // Call options to use throughout this session
}

// NetworkDebugContractTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type NetworkDebugContractTransactorSession struct {
	Contract     *NetworkDebugContractTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts               // Transaction auth options to use throughout this session
}

// NetworkDebugContractRaw is an auto generated low-level Go binding around an Ethereum contract.
type NetworkDebugContractRaw struct {
	Contract *NetworkDebugContract // Generic contract binding to access the raw methods on
}

// NetworkDebugContractCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type NetworkDebugContractCallerRaw struct {
	Contract *NetworkDebugContractCaller // Generic read-only contract binding to access the raw methods on
}

// NetworkDebugContractTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type NetworkDebugContractTransactorRaw struct {
	Contract *NetworkDebugContractTransactor // Generic write-only contract binding to access the raw methods on
}

// NewNetworkDebugContract creates a new instance of NetworkDebugContract, bound to a specific deployed contract.
func NewNetworkDebugContract(address common.Address, backend bind.ContractBackend) (*NetworkDebugContract, error) {
	contract, err := bindNetworkDebugContract(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &NetworkDebugContract{NetworkDebugContractCaller: NetworkDebugContractCaller{contract: contract}, NetworkDebugContractTransactor: NetworkDebugContractTransactor{contract: contract}, NetworkDebugContractFilterer: NetworkDebugContractFilterer{contract: contract}}, nil
}

// NewNetworkDebugContractCaller creates a new read-only instance of NetworkDebugContract, bound to a specific deployed contract.
func NewNetworkDebugContractCaller(address common.Address, caller bind.ContractCaller) (*NetworkDebugContractCaller, error) {
	contract, err := bindNetworkDebugContract(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &NetworkDebugContractCaller{contract: contract}, nil
}

// NewNetworkDebugContractTransactor creates a new write-only instance of NetworkDebugContract, bound to a specific deployed contract.
func NewNetworkDebugContractTransactor(address common.Address, transactor bind.ContractTransactor) (*NetworkDebugContractTransactor, error) {
	contract, err := bindNetworkDebugContract(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &NetworkDebugContractTransactor{contract: contract}, nil
}

// NewNetworkDebugContractFilterer creates a new log filterer instance of NetworkDebugContract, bound to a specific deployed contract.
func NewNetworkDebugContractFilterer(address common.Address, filterer bind.ContractFilterer) (*NetworkDebugContractFilterer, error) {
	contract, err := bindNetworkDebugContract(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &NetworkDebugContractFilterer{contract: contract}, nil
}

// bindNetworkDebugContract binds a generic wrapper to an already deployed contract.
func bindNetworkDebugContract(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := NetworkDebugContractMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_NetworkDebugContract *NetworkDebugContractRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _NetworkDebugContract.Contract.NetworkDebugContractCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_NetworkDebugContract *NetworkDebugContractRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.NetworkDebugContractTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_NetworkDebugContract *NetworkDebugContractRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.NetworkDebugContractTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_NetworkDebugContract *NetworkDebugContractCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _NetworkDebugContract.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_NetworkDebugContract *NetworkDebugContractTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_NetworkDebugContract *NetworkDebugContractTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.contract.Transact(opts, method, params...)
}

// CounterMap is a free data retrieval call binding the contract method 0x6284117d.
//
// Solidity: function counterMap(int256 ) view returns(int256)
func (_NetworkDebugContract *NetworkDebugContractCaller) CounterMap(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _NetworkDebugContract.contract.Call(opts, &out, "counterMap", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CounterMap is a free data retrieval call binding the contract method 0x6284117d.
//
// Solidity: function counterMap(int256 ) view returns(int256)
func (_NetworkDebugContract *NetworkDebugContractSession) CounterMap(arg0 *big.Int) (*big.Int, error) {
	return _NetworkDebugContract.Contract.CounterMap(&_NetworkDebugContract.CallOpts, arg0)
}

// CounterMap is a free data retrieval call binding the contract method 0x6284117d.
//
// Solidity: function counterMap(int256 ) view returns(int256)
func (_NetworkDebugContract *NetworkDebugContractCallerSession) CounterMap(arg0 *big.Int) (*big.Int, error) {
	return _NetworkDebugContract.Contract.CounterMap(&_NetworkDebugContract.CallOpts, arg0)
}

// CurrentStatus is a free data retrieval call binding the contract method 0xef8a9235.
//
// Solidity: function currentStatus() view returns(uint8)
func (_NetworkDebugContract *NetworkDebugContractCaller) CurrentStatus(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _NetworkDebugContract.contract.Call(opts, &out, "currentStatus")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// CurrentStatus is a free data retrieval call binding the contract method 0xef8a9235.
//
// Solidity: function currentStatus() view returns(uint8)
func (_NetworkDebugContract *NetworkDebugContractSession) CurrentStatus() (uint8, error) {
	return _NetworkDebugContract.Contract.CurrentStatus(&_NetworkDebugContract.CallOpts)
}

// CurrentStatus is a free data retrieval call binding the contract method 0xef8a9235.
//
// Solidity: function currentStatus() view returns(uint8)
func (_NetworkDebugContract *NetworkDebugContractCallerSession) CurrentStatus() (uint8, error) {
	return _NetworkDebugContract.Contract.CurrentStatus(&_NetworkDebugContract.CallOpts)
}

// Get is a free data retrieval call binding the contract method 0x6d4ce63c.
//
// Solidity: function get() view returns(int256 data)
func (_NetworkDebugContract *NetworkDebugContractCaller) Get(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _NetworkDebugContract.contract.Call(opts, &out, "get")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Get is a free data retrieval call binding the contract method 0x6d4ce63c.
//
// Solidity: function get() view returns(int256 data)
func (_NetworkDebugContract *NetworkDebugContractSession) Get() (*big.Int, error) {
	return _NetworkDebugContract.Contract.Get(&_NetworkDebugContract.CallOpts)
}

// Get is a free data retrieval call binding the contract method 0x6d4ce63c.
//
// Solidity: function get() view returns(int256 data)
func (_NetworkDebugContract *NetworkDebugContractCallerSession) Get() (*big.Int, error) {
	return _NetworkDebugContract.Contract.Get(&_NetworkDebugContract.CallOpts)
}

// GetCounter is a free data retrieval call binding the contract method 0x5921483f.
//
// Solidity: function getCounter(int256 idx) view returns(int256 data)
func (_NetworkDebugContract *NetworkDebugContractCaller) GetCounter(opts *bind.CallOpts, idx *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _NetworkDebugContract.contract.Call(opts, &out, "getCounter", idx)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetCounter is a free data retrieval call binding the contract method 0x5921483f.
//
// Solidity: function getCounter(int256 idx) view returns(int256 data)
func (_NetworkDebugContract *NetworkDebugContractSession) GetCounter(idx *big.Int) (*big.Int, error) {
	return _NetworkDebugContract.Contract.GetCounter(&_NetworkDebugContract.CallOpts, idx)
}

// GetCounter is a free data retrieval call binding the contract method 0x5921483f.
//
// Solidity: function getCounter(int256 idx) view returns(int256 data)
func (_NetworkDebugContract *NetworkDebugContractCallerSession) GetCounter(idx *big.Int) (*big.Int, error) {
	return _NetworkDebugContract.Contract.GetCounter(&_NetworkDebugContract.CallOpts, idx)
}

// GetMap is a free data retrieval call binding the contract method 0xad3de14c.
//
// Solidity: function getMap() view returns(int256 data)
func (_NetworkDebugContract *NetworkDebugContractCaller) GetMap(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _NetworkDebugContract.contract.Call(opts, &out, "getMap")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetMap is a free data retrieval call binding the contract method 0xad3de14c.
//
// Solidity: function getMap() view returns(int256 data)
func (_NetworkDebugContract *NetworkDebugContractSession) GetMap() (*big.Int, error) {
	return _NetworkDebugContract.Contract.GetMap(&_NetworkDebugContract.CallOpts)
}

// GetMap is a free data retrieval call binding the contract method 0xad3de14c.
//
// Solidity: function getMap() view returns(int256 data)
func (_NetworkDebugContract *NetworkDebugContractCallerSession) GetMap() (*big.Int, error) {
	return _NetworkDebugContract.Contract.GetMap(&_NetworkDebugContract.CallOpts)
}

// StoredData is a free data retrieval call binding the contract method 0x2a1afcd9.
//
// Solidity: function storedData() view returns(int256)
func (_NetworkDebugContract *NetworkDebugContractCaller) StoredData(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _NetworkDebugContract.contract.Call(opts, &out, "storedData")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// StoredData is a free data retrieval call binding the contract method 0x2a1afcd9.
//
// Solidity: function storedData() view returns(int256)
func (_NetworkDebugContract *NetworkDebugContractSession) StoredData() (*big.Int, error) {
	return _NetworkDebugContract.Contract.StoredData(&_NetworkDebugContract.CallOpts)
}

// StoredData is a free data retrieval call binding the contract method 0x2a1afcd9.
//
// Solidity: function storedData() view returns(int256)
func (_NetworkDebugContract *NetworkDebugContractCallerSession) StoredData() (*big.Int, error) {
	return _NetworkDebugContract.Contract.StoredData(&_NetworkDebugContract.CallOpts)
}

// StoredDataMap is a free data retrieval call binding the contract method 0x48ad9fe8.
//
// Solidity: function storedDataMap(address ) view returns(int256)
func (_NetworkDebugContract *NetworkDebugContractCaller) StoredDataMap(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _NetworkDebugContract.contract.Call(opts, &out, "storedDataMap", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// StoredDataMap is a free data retrieval call binding the contract method 0x48ad9fe8.
//
// Solidity: function storedDataMap(address ) view returns(int256)
func (_NetworkDebugContract *NetworkDebugContractSession) StoredDataMap(arg0 common.Address) (*big.Int, error) {
	return _NetworkDebugContract.Contract.StoredDataMap(&_NetworkDebugContract.CallOpts, arg0)
}

// StoredDataMap is a free data retrieval call binding the contract method 0x48ad9fe8.
//
// Solidity: function storedDataMap(address ) view returns(int256)
func (_NetworkDebugContract *NetworkDebugContractCallerSession) StoredDataMap(arg0 common.Address) (*big.Int, error) {
	return _NetworkDebugContract.Contract.StoredDataMap(&_NetworkDebugContract.CallOpts, arg0)
}

// SubContract is a free data retrieval call binding the contract method 0xc0d06d89.
//
// Solidity: function subContract() view returns(address)
func (_NetworkDebugContract *NetworkDebugContractCaller) SubContract(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _NetworkDebugContract.contract.Call(opts, &out, "subContract")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// SubContract is a free data retrieval call binding the contract method 0xc0d06d89.
//
// Solidity: function subContract() view returns(address)
func (_NetworkDebugContract *NetworkDebugContractSession) SubContract() (common.Address, error) {
	return _NetworkDebugContract.Contract.SubContract(&_NetworkDebugContract.CallOpts)
}

// SubContract is a free data retrieval call binding the contract method 0xc0d06d89.
//
// Solidity: function subContract() view returns(address)
func (_NetworkDebugContract *NetworkDebugContractCallerSession) SubContract() (common.Address, error) {
	return _NetworkDebugContract.Contract.SubContract(&_NetworkDebugContract.CallOpts)
}

// AddCounter is a paid mutator transaction binding the contract method 0x23515760.
//
// Solidity: function addCounter(int256 idx, int256 x) returns(int256 value)
func (_NetworkDebugContract *NetworkDebugContractTransactor) AddCounter(opts *bind.TransactOpts, idx *big.Int, x *big.Int) (*types.Transaction, error) {
	return _NetworkDebugContract.contract.Transact(opts, "addCounter", idx, x)
}

// AddCounter is a paid mutator transaction binding the contract method 0x23515760.
//
// Solidity: function addCounter(int256 idx, int256 x) returns(int256 value)
func (_NetworkDebugContract *NetworkDebugContractSession) AddCounter(idx *big.Int, x *big.Int) (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.AddCounter(&_NetworkDebugContract.TransactOpts, idx, x)
}

// AddCounter is a paid mutator transaction binding the contract method 0x23515760.
//
// Solidity: function addCounter(int256 idx, int256 x) returns(int256 value)
func (_NetworkDebugContract *NetworkDebugContractTransactorSession) AddCounter(idx *big.Int, x *big.Int) (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.AddCounter(&_NetworkDebugContract.TransactOpts, idx, x)
}

// AlwaysRevertsAssert is a paid mutator transaction binding the contract method 0x256560d5.
//
// Solidity: function alwaysRevertsAssert() returns()
func (_NetworkDebugContract *NetworkDebugContractTransactor) AlwaysRevertsAssert(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NetworkDebugContract.contract.Transact(opts, "alwaysRevertsAssert")
}

// AlwaysRevertsAssert is a paid mutator transaction binding the contract method 0x256560d5.
//
// Solidity: function alwaysRevertsAssert() returns()
func (_NetworkDebugContract *NetworkDebugContractSession) AlwaysRevertsAssert() (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.AlwaysRevertsAssert(&_NetworkDebugContract.TransactOpts)
}

// AlwaysRevertsAssert is a paid mutator transaction binding the contract method 0x256560d5.
//
// Solidity: function alwaysRevertsAssert() returns()
func (_NetworkDebugContract *NetworkDebugContractTransactorSession) AlwaysRevertsAssert() (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.AlwaysRevertsAssert(&_NetworkDebugContract.TransactOpts)
}

// AlwaysRevertsCustomError is a paid mutator transaction binding the contract method 0x5e9c80d6.
//
// Solidity: function alwaysRevertsCustomError() returns()
func (_NetworkDebugContract *NetworkDebugContractTransactor) AlwaysRevertsCustomError(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NetworkDebugContract.contract.Transact(opts, "alwaysRevertsCustomError")
}

// AlwaysRevertsCustomError is a paid mutator transaction binding the contract method 0x5e9c80d6.
//
// Solidity: function alwaysRevertsCustomError() returns()
func (_NetworkDebugContract *NetworkDebugContractSession) AlwaysRevertsCustomError() (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.AlwaysRevertsCustomError(&_NetworkDebugContract.TransactOpts)
}

// AlwaysRevertsCustomError is a paid mutator transaction binding the contract method 0x5e9c80d6.
//
// Solidity: function alwaysRevertsCustomError() returns()
func (_NetworkDebugContract *NetworkDebugContractTransactorSession) AlwaysRevertsCustomError() (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.AlwaysRevertsCustomError(&_NetworkDebugContract.TransactOpts)
}

// AlwaysRevertsCustomErrorNoValues is a paid mutator transaction binding the contract method 0xb600141f.
//
// Solidity: function alwaysRevertsCustomErrorNoValues() returns()
func (_NetworkDebugContract *NetworkDebugContractTransactor) AlwaysRevertsCustomErrorNoValues(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NetworkDebugContract.contract.Transact(opts, "alwaysRevertsCustomErrorNoValues")
}

// AlwaysRevertsCustomErrorNoValues is a paid mutator transaction binding the contract method 0xb600141f.
//
// Solidity: function alwaysRevertsCustomErrorNoValues() returns()
func (_NetworkDebugContract *NetworkDebugContractSession) AlwaysRevertsCustomErrorNoValues() (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.AlwaysRevertsCustomErrorNoValues(&_NetworkDebugContract.TransactOpts)
}

// AlwaysRevertsCustomErrorNoValues is a paid mutator transaction binding the contract method 0xb600141f.
//
// Solidity: function alwaysRevertsCustomErrorNoValues() returns()
func (_NetworkDebugContract *NetworkDebugContractTransactorSession) AlwaysRevertsCustomErrorNoValues() (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.AlwaysRevertsCustomErrorNoValues(&_NetworkDebugContract.TransactOpts)
}

// AlwaysRevertsRequire is a paid mutator transaction binding the contract method 0x06595f75.
//
// Solidity: function alwaysRevertsRequire() returns()
func (_NetworkDebugContract *NetworkDebugContractTransactor) AlwaysRevertsRequire(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NetworkDebugContract.contract.Transact(opts, "alwaysRevertsRequire")
}

// AlwaysRevertsRequire is a paid mutator transaction binding the contract method 0x06595f75.
//
// Solidity: function alwaysRevertsRequire() returns()
func (_NetworkDebugContract *NetworkDebugContractSession) AlwaysRevertsRequire() (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.AlwaysRevertsRequire(&_NetworkDebugContract.TransactOpts)
}

// AlwaysRevertsRequire is a paid mutator transaction binding the contract method 0x06595f75.
//
// Solidity: function alwaysRevertsRequire() returns()
func (_NetworkDebugContract *NetworkDebugContractTransactorSession) AlwaysRevertsRequire() (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.AlwaysRevertsRequire(&_NetworkDebugContract.TransactOpts)
}

// CallRevertFunctionInSubContract is a paid mutator transaction binding the contract method 0x11b3c478.
//
// Solidity: function callRevertFunctionInSubContract(uint256 x, uint256 y) returns()
func (_NetworkDebugContract *NetworkDebugContractTransactor) CallRevertFunctionInSubContract(opts *bind.TransactOpts, x *big.Int, y *big.Int) (*types.Transaction, error) {
	return _NetworkDebugContract.contract.Transact(opts, "callRevertFunctionInSubContract", x, y)
}

// CallRevertFunctionInSubContract is a paid mutator transaction binding the contract method 0x11b3c478.
//
// Solidity: function callRevertFunctionInSubContract(uint256 x, uint256 y) returns()
func (_NetworkDebugContract *NetworkDebugContractSession) CallRevertFunctionInSubContract(x *big.Int, y *big.Int) (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.CallRevertFunctionInSubContract(&_NetworkDebugContract.TransactOpts, x, y)
}

// CallRevertFunctionInSubContract is a paid mutator transaction binding the contract method 0x11b3c478.
//
// Solidity: function callRevertFunctionInSubContract(uint256 x, uint256 y) returns()
func (_NetworkDebugContract *NetworkDebugContractTransactorSession) CallRevertFunctionInSubContract(x *big.Int, y *big.Int) (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.CallRevertFunctionInSubContract(&_NetworkDebugContract.TransactOpts, x, y)
}

// CallRevertFunctionInTheContract is a paid mutator transaction binding the contract method 0x9349d00b.
//
// Solidity: function callRevertFunctionInTheContract() returns()
func (_NetworkDebugContract *NetworkDebugContractTransactor) CallRevertFunctionInTheContract(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NetworkDebugContract.contract.Transact(opts, "callRevertFunctionInTheContract")
}

// CallRevertFunctionInTheContract is a paid mutator transaction binding the contract method 0x9349d00b.
//
// Solidity: function callRevertFunctionInTheContract() returns()
func (_NetworkDebugContract *NetworkDebugContractSession) CallRevertFunctionInTheContract() (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.CallRevertFunctionInTheContract(&_NetworkDebugContract.TransactOpts)
}

// CallRevertFunctionInTheContract is a paid mutator transaction binding the contract method 0x9349d00b.
//
// Solidity: function callRevertFunctionInTheContract() returns()
func (_NetworkDebugContract *NetworkDebugContractTransactorSession) CallRevertFunctionInTheContract() (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.CallRevertFunctionInTheContract(&_NetworkDebugContract.TransactOpts)
}

// CallbackMethod is a paid mutator transaction binding the contract method 0xfbcb8d07.
//
// Solidity: function callbackMethod(int256 x) returns(int256)
func (_NetworkDebugContract *NetworkDebugContractTransactor) CallbackMethod(opts *bind.TransactOpts, x *big.Int) (*types.Transaction, error) {
	return _NetworkDebugContract.contract.Transact(opts, "callbackMethod", x)
}

// CallbackMethod is a paid mutator transaction binding the contract method 0xfbcb8d07.
//
// Solidity: function callbackMethod(int256 x) returns(int256)
func (_NetworkDebugContract *NetworkDebugContractSession) CallbackMethod(x *big.Int) (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.CallbackMethod(&_NetworkDebugContract.TransactOpts, x)
}

// CallbackMethod is a paid mutator transaction binding the contract method 0xfbcb8d07.
//
// Solidity: function callbackMethod(int256 x) returns(int256)
func (_NetworkDebugContract *NetworkDebugContractTransactorSession) CallbackMethod(x *big.Int) (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.CallbackMethod(&_NetworkDebugContract.TransactOpts, x)
}

// EmitAddress is a paid mutator transaction binding the contract method 0xec5c3ede.
//
// Solidity: function emitAddress(address addr) returns(address)
func (_NetworkDebugContract *NetworkDebugContractTransactor) EmitAddress(opts *bind.TransactOpts, addr common.Address) (*types.Transaction, error) {
	return _NetworkDebugContract.contract.Transact(opts, "emitAddress", addr)
}

// EmitAddress is a paid mutator transaction binding the contract method 0xec5c3ede.
//
// Solidity: function emitAddress(address addr) returns(address)
func (_NetworkDebugContract *NetworkDebugContractSession) EmitAddress(addr common.Address) (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.EmitAddress(&_NetworkDebugContract.TransactOpts, addr)
}

// EmitAddress is a paid mutator transaction binding the contract method 0xec5c3ede.
//
// Solidity: function emitAddress(address addr) returns(address)
func (_NetworkDebugContract *NetworkDebugContractTransactorSession) EmitAddress(addr common.Address) (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.EmitAddress(&_NetworkDebugContract.TransactOpts, addr)
}

// EmitBytes32 is a paid mutator transaction binding the contract method 0x33311ef3.
//
// Solidity: function emitBytes32(bytes32 input) returns(bytes32 output)
func (_NetworkDebugContract *NetworkDebugContractTransactor) EmitBytes32(opts *bind.TransactOpts, input [32]byte) (*types.Transaction, error) {
	return _NetworkDebugContract.contract.Transact(opts, "emitBytes32", input)
}

// EmitBytes32 is a paid mutator transaction binding the contract method 0x33311ef3.
//
// Solidity: function emitBytes32(bytes32 input) returns(bytes32 output)
func (_NetworkDebugContract *NetworkDebugContractSession) EmitBytes32(input [32]byte) (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.EmitBytes32(&_NetworkDebugContract.TransactOpts, input)
}

// EmitBytes32 is a paid mutator transaction binding the contract method 0x33311ef3.
//
// Solidity: function emitBytes32(bytes32 input) returns(bytes32 output)
func (_NetworkDebugContract *NetworkDebugContractTransactorSession) EmitBytes32(input [32]byte) (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.EmitBytes32(&_NetworkDebugContract.TransactOpts, input)
}

// EmitFourParamMixedEvent is a paid mutator transaction binding the contract method 0xc2124b22.
//
// Solidity: function emitFourParamMixedEvent() returns()
func (_NetworkDebugContract *NetworkDebugContractTransactor) EmitFourParamMixedEvent(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NetworkDebugContract.contract.Transact(opts, "emitFourParamMixedEvent")
}

// EmitFourParamMixedEvent is a paid mutator transaction binding the contract method 0xc2124b22.
//
// Solidity: function emitFourParamMixedEvent() returns()
func (_NetworkDebugContract *NetworkDebugContractSession) EmitFourParamMixedEvent() (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.EmitFourParamMixedEvent(&_NetworkDebugContract.TransactOpts)
}

// EmitFourParamMixedEvent is a paid mutator transaction binding the contract method 0xc2124b22.
//
// Solidity: function emitFourParamMixedEvent() returns()
func (_NetworkDebugContract *NetworkDebugContractTransactorSession) EmitFourParamMixedEvent() (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.EmitFourParamMixedEvent(&_NetworkDebugContract.TransactOpts)
}

// EmitInputs is a paid mutator transaction binding the contract method 0x81b375a0.
//
// Solidity: function emitInputs(uint256 inputVal1, string inputVal2) returns()
func (_NetworkDebugContract *NetworkDebugContractTransactor) EmitInputs(opts *bind.TransactOpts, inputVal1 *big.Int, inputVal2 string) (*types.Transaction, error) {
	return _NetworkDebugContract.contract.Transact(opts, "emitInputs", inputVal1, inputVal2)
}

// EmitInputs is a paid mutator transaction binding the contract method 0x81b375a0.
//
// Solidity: function emitInputs(uint256 inputVal1, string inputVal2) returns()
func (_NetworkDebugContract *NetworkDebugContractSession) EmitInputs(inputVal1 *big.Int, inputVal2 string) (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.EmitInputs(&_NetworkDebugContract.TransactOpts, inputVal1, inputVal2)
}

// EmitInputs is a paid mutator transaction binding the contract method 0x81b375a0.
//
// Solidity: function emitInputs(uint256 inputVal1, string inputVal2) returns()
func (_NetworkDebugContract *NetworkDebugContractTransactorSession) EmitInputs(inputVal1 *big.Int, inputVal2 string) (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.EmitInputs(&_NetworkDebugContract.TransactOpts, inputVal1, inputVal2)
}

// EmitInputsOutputs is a paid mutator transaction binding the contract method 0xd7a80205.
//
// Solidity: function emitInputsOutputs(uint256 inputVal1, string inputVal2) returns(uint256, string)
func (_NetworkDebugContract *NetworkDebugContractTransactor) EmitInputsOutputs(opts *bind.TransactOpts, inputVal1 *big.Int, inputVal2 string) (*types.Transaction, error) {
	return _NetworkDebugContract.contract.Transact(opts, "emitInputsOutputs", inputVal1, inputVal2)
}

// EmitInputsOutputs is a paid mutator transaction binding the contract method 0xd7a80205.
//
// Solidity: function emitInputsOutputs(uint256 inputVal1, string inputVal2) returns(uint256, string)
func (_NetworkDebugContract *NetworkDebugContractSession) EmitInputsOutputs(inputVal1 *big.Int, inputVal2 string) (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.EmitInputsOutputs(&_NetworkDebugContract.TransactOpts, inputVal1, inputVal2)
}

// EmitInputsOutputs is a paid mutator transaction binding the contract method 0xd7a80205.
//
// Solidity: function emitInputsOutputs(uint256 inputVal1, string inputVal2) returns(uint256, string)
func (_NetworkDebugContract *NetworkDebugContractTransactorSession) EmitInputsOutputs(inputVal1 *big.Int, inputVal2 string) (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.EmitInputsOutputs(&_NetworkDebugContract.TransactOpts, inputVal1, inputVal2)
}

// EmitInts is a paid mutator transaction binding the contract method 0x9e099652.
//
// Solidity: function emitInts(int256 first, int128 second, uint256 third) returns(int256, int128 outputVal1, uint256 outputVal2)
func (_NetworkDebugContract *NetworkDebugContractTransactor) EmitInts(opts *bind.TransactOpts, first *big.Int, second *big.Int, third *big.Int) (*types.Transaction, error) {
	return _NetworkDebugContract.contract.Transact(opts, "emitInts", first, second, third)
}

// EmitInts is a paid mutator transaction binding the contract method 0x9e099652.
//
// Solidity: function emitInts(int256 first, int128 second, uint256 third) returns(int256, int128 outputVal1, uint256 outputVal2)
func (_NetworkDebugContract *NetworkDebugContractSession) EmitInts(first *big.Int, second *big.Int, third *big.Int) (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.EmitInts(&_NetworkDebugContract.TransactOpts, first, second, third)
}

// EmitInts is a paid mutator transaction binding the contract method 0x9e099652.
//
// Solidity: function emitInts(int256 first, int128 second, uint256 third) returns(int256, int128 outputVal1, uint256 outputVal2)
func (_NetworkDebugContract *NetworkDebugContractTransactorSession) EmitInts(first *big.Int, second *big.Int, third *big.Int) (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.EmitInts(&_NetworkDebugContract.TransactOpts, first, second, third)
}

// EmitNamedInputsOutputs is a paid mutator transaction binding the contract method 0x45f0c9e6.
//
// Solidity: function emitNamedInputsOutputs(uint256 inputVal1, string inputVal2) returns(uint256 outputVal1, string outputVal2)
func (_NetworkDebugContract *NetworkDebugContractTransactor) EmitNamedInputsOutputs(opts *bind.TransactOpts, inputVal1 *big.Int, inputVal2 string) (*types.Transaction, error) {
	return _NetworkDebugContract.contract.Transact(opts, "emitNamedInputsOutputs", inputVal1, inputVal2)
}

// EmitNamedInputsOutputs is a paid mutator transaction binding the contract method 0x45f0c9e6.
//
// Solidity: function emitNamedInputsOutputs(uint256 inputVal1, string inputVal2) returns(uint256 outputVal1, string outputVal2)
func (_NetworkDebugContract *NetworkDebugContractSession) EmitNamedInputsOutputs(inputVal1 *big.Int, inputVal2 string) (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.EmitNamedInputsOutputs(&_NetworkDebugContract.TransactOpts, inputVal1, inputVal2)
}

// EmitNamedInputsOutputs is a paid mutator transaction binding the contract method 0x45f0c9e6.
//
// Solidity: function emitNamedInputsOutputs(uint256 inputVal1, string inputVal2) returns(uint256 outputVal1, string outputVal2)
func (_NetworkDebugContract *NetworkDebugContractTransactorSession) EmitNamedInputsOutputs(inputVal1 *big.Int, inputVal2 string) (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.EmitNamedInputsOutputs(&_NetworkDebugContract.TransactOpts, inputVal1, inputVal2)
}

// EmitNamedOutputs is a paid mutator transaction binding the contract method 0x7014c81d.
//
// Solidity: function emitNamedOutputs() returns(uint256 outputVal1, string outputVal2)
func (_NetworkDebugContract *NetworkDebugContractTransactor) EmitNamedOutputs(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NetworkDebugContract.contract.Transact(opts, "emitNamedOutputs")
}

// EmitNamedOutputs is a paid mutator transaction binding the contract method 0x7014c81d.
//
// Solidity: function emitNamedOutputs() returns(uint256 outputVal1, string outputVal2)
func (_NetworkDebugContract *NetworkDebugContractSession) EmitNamedOutputs() (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.EmitNamedOutputs(&_NetworkDebugContract.TransactOpts)
}

// EmitNamedOutputs is a paid mutator transaction binding the contract method 0x7014c81d.
//
// Solidity: function emitNamedOutputs() returns(uint256 outputVal1, string outputVal2)
func (_NetworkDebugContract *NetworkDebugContractTransactorSession) EmitNamedOutputs() (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.EmitNamedOutputs(&_NetworkDebugContract.TransactOpts)
}

// EmitNoIndexEvent is a paid mutator transaction binding the contract method 0x95a81a4c.
//
// Solidity: function emitNoIndexEvent() returns()
func (_NetworkDebugContract *NetworkDebugContractTransactor) EmitNoIndexEvent(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NetworkDebugContract.contract.Transact(opts, "emitNoIndexEvent")
}

// EmitNoIndexEvent is a paid mutator transaction binding the contract method 0x95a81a4c.
//
// Solidity: function emitNoIndexEvent() returns()
func (_NetworkDebugContract *NetworkDebugContractSession) EmitNoIndexEvent() (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.EmitNoIndexEvent(&_NetworkDebugContract.TransactOpts)
}

// EmitNoIndexEvent is a paid mutator transaction binding the contract method 0x95a81a4c.
//
// Solidity: function emitNoIndexEvent() returns()
func (_NetworkDebugContract *NetworkDebugContractTransactorSession) EmitNoIndexEvent() (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.EmitNoIndexEvent(&_NetworkDebugContract.TransactOpts)
}

// EmitNoIndexEventString is a paid mutator transaction binding the contract method 0x788c4772.
//
// Solidity: function emitNoIndexEventString() returns()
func (_NetworkDebugContract *NetworkDebugContractTransactor) EmitNoIndexEventString(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NetworkDebugContract.contract.Transact(opts, "emitNoIndexEventString")
}

// EmitNoIndexEventString is a paid mutator transaction binding the contract method 0x788c4772.
//
// Solidity: function emitNoIndexEventString() returns()
func (_NetworkDebugContract *NetworkDebugContractSession) EmitNoIndexEventString() (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.EmitNoIndexEventString(&_NetworkDebugContract.TransactOpts)
}

// EmitNoIndexEventString is a paid mutator transaction binding the contract method 0x788c4772.
//
// Solidity: function emitNoIndexEventString() returns()
func (_NetworkDebugContract *NetworkDebugContractTransactorSession) EmitNoIndexEventString() (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.EmitNoIndexEventString(&_NetworkDebugContract.TransactOpts)
}

// EmitNoIndexStructEvent is a paid mutator transaction binding the contract method 0x62c270e1.
//
// Solidity: function emitNoIndexStructEvent() returns()
func (_NetworkDebugContract *NetworkDebugContractTransactor) EmitNoIndexStructEvent(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NetworkDebugContract.contract.Transact(opts, "emitNoIndexStructEvent")
}

// EmitNoIndexStructEvent is a paid mutator transaction binding the contract method 0x62c270e1.
//
// Solidity: function emitNoIndexStructEvent() returns()
func (_NetworkDebugContract *NetworkDebugContractSession) EmitNoIndexStructEvent() (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.EmitNoIndexStructEvent(&_NetworkDebugContract.TransactOpts)
}

// EmitNoIndexStructEvent is a paid mutator transaction binding the contract method 0x62c270e1.
//
// Solidity: function emitNoIndexStructEvent() returns()
func (_NetworkDebugContract *NetworkDebugContractTransactorSession) EmitNoIndexStructEvent() (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.EmitNoIndexStructEvent(&_NetworkDebugContract.TransactOpts)
}

// EmitOneIndexEvent is a paid mutator transaction binding the contract method 0x8f856296.
//
// Solidity: function emitOneIndexEvent() returns()
func (_NetworkDebugContract *NetworkDebugContractTransactor) EmitOneIndexEvent(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NetworkDebugContract.contract.Transact(opts, "emitOneIndexEvent")
}

// EmitOneIndexEvent is a paid mutator transaction binding the contract method 0x8f856296.
//
// Solidity: function emitOneIndexEvent() returns()
func (_NetworkDebugContract *NetworkDebugContractSession) EmitOneIndexEvent() (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.EmitOneIndexEvent(&_NetworkDebugContract.TransactOpts)
}

// EmitOneIndexEvent is a paid mutator transaction binding the contract method 0x8f856296.
//
// Solidity: function emitOneIndexEvent() returns()
func (_NetworkDebugContract *NetworkDebugContractTransactorSession) EmitOneIndexEvent() (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.EmitOneIndexEvent(&_NetworkDebugContract.TransactOpts)
}

// EmitOutputs is a paid mutator transaction binding the contract method 0x8db611be.
//
// Solidity: function emitOutputs() returns(uint256, string)
func (_NetworkDebugContract *NetworkDebugContractTransactor) EmitOutputs(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NetworkDebugContract.contract.Transact(opts, "emitOutputs")
}

// EmitOutputs is a paid mutator transaction binding the contract method 0x8db611be.
//
// Solidity: function emitOutputs() returns(uint256, string)
func (_NetworkDebugContract *NetworkDebugContractSession) EmitOutputs() (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.EmitOutputs(&_NetworkDebugContract.TransactOpts)
}

// EmitOutputs is a paid mutator transaction binding the contract method 0x8db611be.
//
// Solidity: function emitOutputs() returns(uint256, string)
func (_NetworkDebugContract *NetworkDebugContractTransactorSession) EmitOutputs() (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.EmitOutputs(&_NetworkDebugContract.TransactOpts)
}

// EmitThreeIndexEvent is a paid mutator transaction binding the contract method 0xaa3fdcf4.
//
// Solidity: function emitThreeIndexEvent() returns()
func (_NetworkDebugContract *NetworkDebugContractTransactor) EmitThreeIndexEvent(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NetworkDebugContract.contract.Transact(opts, "emitThreeIndexEvent")
}

// EmitThreeIndexEvent is a paid mutator transaction binding the contract method 0xaa3fdcf4.
//
// Solidity: function emitThreeIndexEvent() returns()
func (_NetworkDebugContract *NetworkDebugContractSession) EmitThreeIndexEvent() (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.EmitThreeIndexEvent(&_NetworkDebugContract.TransactOpts)
}

// EmitThreeIndexEvent is a paid mutator transaction binding the contract method 0xaa3fdcf4.
//
// Solidity: function emitThreeIndexEvent() returns()
func (_NetworkDebugContract *NetworkDebugContractTransactorSession) EmitThreeIndexEvent() (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.EmitThreeIndexEvent(&_NetworkDebugContract.TransactOpts)
}

// EmitTwoIndexEvent is a paid mutator transaction binding the contract method 0x1e31d0a8.
//
// Solidity: function emitTwoIndexEvent() returns()
func (_NetworkDebugContract *NetworkDebugContractTransactor) EmitTwoIndexEvent(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NetworkDebugContract.contract.Transact(opts, "emitTwoIndexEvent")
}

// EmitTwoIndexEvent is a paid mutator transaction binding the contract method 0x1e31d0a8.
//
// Solidity: function emitTwoIndexEvent() returns()
func (_NetworkDebugContract *NetworkDebugContractSession) EmitTwoIndexEvent() (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.EmitTwoIndexEvent(&_NetworkDebugContract.TransactOpts)
}

// EmitTwoIndexEvent is a paid mutator transaction binding the contract method 0x1e31d0a8.
//
// Solidity: function emitTwoIndexEvent() returns()
func (_NetworkDebugContract *NetworkDebugContractTransactorSession) EmitTwoIndexEvent() (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.EmitTwoIndexEvent(&_NetworkDebugContract.TransactOpts)
}

// OnTokenTransfer is a paid mutator transaction binding the contract method 0xa4c0ed36.
//
// Solidity: function onTokenTransfer(address sender, uint256 amount, bytes data) returns()
func (_NetworkDebugContract *NetworkDebugContractTransactor) OnTokenTransfer(opts *bind.TransactOpts, sender common.Address, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _NetworkDebugContract.contract.Transact(opts, "onTokenTransfer", sender, amount, data)
}

// OnTokenTransfer is a paid mutator transaction binding the contract method 0xa4c0ed36.
//
// Solidity: function onTokenTransfer(address sender, uint256 amount, bytes data) returns()
func (_NetworkDebugContract *NetworkDebugContractSession) OnTokenTransfer(sender common.Address, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.OnTokenTransfer(&_NetworkDebugContract.TransactOpts, sender, amount, data)
}

// OnTokenTransfer is a paid mutator transaction binding the contract method 0xa4c0ed36.
//
// Solidity: function onTokenTransfer(address sender, uint256 amount, bytes data) returns()
func (_NetworkDebugContract *NetworkDebugContractTransactorSession) OnTokenTransfer(sender common.Address, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.OnTokenTransfer(&_NetworkDebugContract.TransactOpts, sender, amount, data)
}

// Pay is a paid mutator transaction binding the contract method 0x1b9265b8.
//
// Solidity: function pay() payable returns()
func (_NetworkDebugContract *NetworkDebugContractTransactor) Pay(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NetworkDebugContract.contract.Transact(opts, "pay")
}

// Pay is a paid mutator transaction binding the contract method 0x1b9265b8.
//
// Solidity: function pay() payable returns()
func (_NetworkDebugContract *NetworkDebugContractSession) Pay() (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.Pay(&_NetworkDebugContract.TransactOpts)
}

// Pay is a paid mutator transaction binding the contract method 0x1b9265b8.
//
// Solidity: function pay() payable returns()
func (_NetworkDebugContract *NetworkDebugContractTransactorSession) Pay() (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.Pay(&_NetworkDebugContract.TransactOpts)
}

// ProcessAddressArray is a paid mutator transaction binding the contract method 0xe1111f79.
//
// Solidity: function processAddressArray(address[] input) returns(address[])
func (_NetworkDebugContract *NetworkDebugContractTransactor) ProcessAddressArray(opts *bind.TransactOpts, input []common.Address) (*types.Transaction, error) {
	return _NetworkDebugContract.contract.Transact(opts, "processAddressArray", input)
}

// ProcessAddressArray is a paid mutator transaction binding the contract method 0xe1111f79.
//
// Solidity: function processAddressArray(address[] input) returns(address[])
func (_NetworkDebugContract *NetworkDebugContractSession) ProcessAddressArray(input []common.Address) (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.ProcessAddressArray(&_NetworkDebugContract.TransactOpts, input)
}

// ProcessAddressArray is a paid mutator transaction binding the contract method 0xe1111f79.
//
// Solidity: function processAddressArray(address[] input) returns(address[])
func (_NetworkDebugContract *NetworkDebugContractTransactorSession) ProcessAddressArray(input []common.Address) (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.ProcessAddressArray(&_NetworkDebugContract.TransactOpts, input)
}

// ProcessDynamicData is a paid mutator transaction binding the contract method 0x7fdc8fe1.
//
// Solidity: function processDynamicData((string,uint256[]) data) returns((string,uint256[]))
func (_NetworkDebugContract *NetworkDebugContractTransactor) ProcessDynamicData(opts *bind.TransactOpts, data NetworkDebugContractData) (*types.Transaction, error) {
	return _NetworkDebugContract.contract.Transact(opts, "processDynamicData", data)
}

// ProcessDynamicData is a paid mutator transaction binding the contract method 0x7fdc8fe1.
//
// Solidity: function processDynamicData((string,uint256[]) data) returns((string,uint256[]))
func (_NetworkDebugContract *NetworkDebugContractSession) ProcessDynamicData(data NetworkDebugContractData) (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.ProcessDynamicData(&_NetworkDebugContract.TransactOpts, data)
}

// ProcessDynamicData is a paid mutator transaction binding the contract method 0x7fdc8fe1.
//
// Solidity: function processDynamicData((string,uint256[]) data) returns((string,uint256[]))
func (_NetworkDebugContract *NetworkDebugContractTransactorSession) ProcessDynamicData(data NetworkDebugContractData) (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.ProcessDynamicData(&_NetworkDebugContract.TransactOpts, data)
}

// ProcessFixedDataArray is a paid mutator transaction binding the contract method 0x99adad2e.
//
// Solidity: function processFixedDataArray((string,uint256[])[3] data) returns((string,uint256[])[2])
func (_NetworkDebugContract *NetworkDebugContractTransactor) ProcessFixedDataArray(opts *bind.TransactOpts, data [3]NetworkDebugContractData) (*types.Transaction, error) {
	return _NetworkDebugContract.contract.Transact(opts, "processFixedDataArray", data)
}

// ProcessFixedDataArray is a paid mutator transaction binding the contract method 0x99adad2e.
//
// Solidity: function processFixedDataArray((string,uint256[])[3] data) returns((string,uint256[])[2])
func (_NetworkDebugContract *NetworkDebugContractSession) ProcessFixedDataArray(data [3]NetworkDebugContractData) (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.ProcessFixedDataArray(&_NetworkDebugContract.TransactOpts, data)
}

// ProcessFixedDataArray is a paid mutator transaction binding the contract method 0x99adad2e.
//
// Solidity: function processFixedDataArray((string,uint256[])[3] data) returns((string,uint256[])[2])
func (_NetworkDebugContract *NetworkDebugContractTransactorSession) ProcessFixedDataArray(data [3]NetworkDebugContractData) (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.ProcessFixedDataArray(&_NetworkDebugContract.TransactOpts, data)
}

// ProcessNestedData is a paid mutator transaction binding the contract method 0x7f12881c.
//
// Solidity: function processNestedData(((string,uint256[]),bytes) data) returns(((string,uint256[]),bytes))
func (_NetworkDebugContract *NetworkDebugContractTransactor) ProcessNestedData(opts *bind.TransactOpts, data NetworkDebugContractNestedData) (*types.Transaction, error) {
	return _NetworkDebugContract.contract.Transact(opts, "processNestedData", data)
}

// ProcessNestedData is a paid mutator transaction binding the contract method 0x7f12881c.
//
// Solidity: function processNestedData(((string,uint256[]),bytes) data) returns(((string,uint256[]),bytes))
func (_NetworkDebugContract *NetworkDebugContractSession) ProcessNestedData(data NetworkDebugContractNestedData) (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.ProcessNestedData(&_NetworkDebugContract.TransactOpts, data)
}

// ProcessNestedData is a paid mutator transaction binding the contract method 0x7f12881c.
//
// Solidity: function processNestedData(((string,uint256[]),bytes) data) returns(((string,uint256[]),bytes))
func (_NetworkDebugContract *NetworkDebugContractTransactorSession) ProcessNestedData(data NetworkDebugContractNestedData) (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.ProcessNestedData(&_NetworkDebugContract.TransactOpts, data)
}

// ProcessNestedData0 is a paid mutator transaction binding the contract method 0xf499af2a.
//
// Solidity: function processNestedData((string,uint256[]) data) returns(((string,uint256[]),bytes))
func (_NetworkDebugContract *NetworkDebugContractTransactor) ProcessNestedData0(opts *bind.TransactOpts, data NetworkDebugContractData) (*types.Transaction, error) {
	return _NetworkDebugContract.contract.Transact(opts, "processNestedData0", data)
}

// ProcessNestedData0 is a paid mutator transaction binding the contract method 0xf499af2a.
//
// Solidity: function processNestedData((string,uint256[]) data) returns(((string,uint256[]),bytes))
func (_NetworkDebugContract *NetworkDebugContractSession) ProcessNestedData0(data NetworkDebugContractData) (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.ProcessNestedData0(&_NetworkDebugContract.TransactOpts, data)
}

// ProcessNestedData0 is a paid mutator transaction binding the contract method 0xf499af2a.
//
// Solidity: function processNestedData((string,uint256[]) data) returns(((string,uint256[]),bytes))
func (_NetworkDebugContract *NetworkDebugContractTransactorSession) ProcessNestedData0(data NetworkDebugContractData) (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.ProcessNestedData0(&_NetworkDebugContract.TransactOpts, data)
}

// ProcessUintArray is a paid mutator transaction binding the contract method 0x12d91233.
//
// Solidity: function processUintArray(uint256[] input) returns(uint256[])
func (_NetworkDebugContract *NetworkDebugContractTransactor) ProcessUintArray(opts *bind.TransactOpts, input []*big.Int) (*types.Transaction, error) {
	return _NetworkDebugContract.contract.Transact(opts, "processUintArray", input)
}

// ProcessUintArray is a paid mutator transaction binding the contract method 0x12d91233.
//
// Solidity: function processUintArray(uint256[] input) returns(uint256[])
func (_NetworkDebugContract *NetworkDebugContractSession) ProcessUintArray(input []*big.Int) (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.ProcessUintArray(&_NetworkDebugContract.TransactOpts, input)
}

// ProcessUintArray is a paid mutator transaction binding the contract method 0x12d91233.
//
// Solidity: function processUintArray(uint256[] input) returns(uint256[])
func (_NetworkDebugContract *NetworkDebugContractTransactorSession) ProcessUintArray(input []*big.Int) (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.ProcessUintArray(&_NetworkDebugContract.TransactOpts, input)
}

// ResetCounter is a paid mutator transaction binding the contract method 0xf3396bd9.
//
// Solidity: function resetCounter(int256 idx) returns()
func (_NetworkDebugContract *NetworkDebugContractTransactor) ResetCounter(opts *bind.TransactOpts, idx *big.Int) (*types.Transaction, error) {
	return _NetworkDebugContract.contract.Transact(opts, "resetCounter", idx)
}

// ResetCounter is a paid mutator transaction binding the contract method 0xf3396bd9.
//
// Solidity: function resetCounter(int256 idx) returns()
func (_NetworkDebugContract *NetworkDebugContractSession) ResetCounter(idx *big.Int) (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.ResetCounter(&_NetworkDebugContract.TransactOpts, idx)
}

// ResetCounter is a paid mutator transaction binding the contract method 0xf3396bd9.
//
// Solidity: function resetCounter(int256 idx) returns()
func (_NetworkDebugContract *NetworkDebugContractTransactorSession) ResetCounter(idx *big.Int) (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.ResetCounter(&_NetworkDebugContract.TransactOpts, idx)
}

// Set is a paid mutator transaction binding the contract method 0xe5c19b2d.
//
// Solidity: function set(int256 x) returns(int256 value)
func (_NetworkDebugContract *NetworkDebugContractTransactor) Set(opts *bind.TransactOpts, x *big.Int) (*types.Transaction, error) {
	return _NetworkDebugContract.contract.Transact(opts, "set", x)
}

// Set is a paid mutator transaction binding the contract method 0xe5c19b2d.
//
// Solidity: function set(int256 x) returns(int256 value)
func (_NetworkDebugContract *NetworkDebugContractSession) Set(x *big.Int) (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.Set(&_NetworkDebugContract.TransactOpts, x)
}

// Set is a paid mutator transaction binding the contract method 0xe5c19b2d.
//
// Solidity: function set(int256 x) returns(int256 value)
func (_NetworkDebugContract *NetworkDebugContractTransactorSession) Set(x *big.Int) (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.Set(&_NetworkDebugContract.TransactOpts, x)
}

// SetMap is a paid mutator transaction binding the contract method 0xe8116e28.
//
// Solidity: function setMap(int256 x) returns(int256 value)
func (_NetworkDebugContract *NetworkDebugContractTransactor) SetMap(opts *bind.TransactOpts, x *big.Int) (*types.Transaction, error) {
	return _NetworkDebugContract.contract.Transact(opts, "setMap", x)
}

// SetMap is a paid mutator transaction binding the contract method 0xe8116e28.
//
// Solidity: function setMap(int256 x) returns(int256 value)
func (_NetworkDebugContract *NetworkDebugContractSession) SetMap(x *big.Int) (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.SetMap(&_NetworkDebugContract.TransactOpts, x)
}

// SetMap is a paid mutator transaction binding the contract method 0xe8116e28.
//
// Solidity: function setMap(int256 x) returns(int256 value)
func (_NetworkDebugContract *NetworkDebugContractTransactorSession) SetMap(x *big.Int) (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.SetMap(&_NetworkDebugContract.TransactOpts, x)
}

// SetStatus is a paid mutator transaction binding the contract method 0x2e49d78b.
//
// Solidity: function setStatus(uint8 status) returns(uint8)
func (_NetworkDebugContract *NetworkDebugContractTransactor) SetStatus(opts *bind.TransactOpts, status uint8) (*types.Transaction, error) {
	return _NetworkDebugContract.contract.Transact(opts, "setStatus", status)
}

// SetStatus is a paid mutator transaction binding the contract method 0x2e49d78b.
//
// Solidity: function setStatus(uint8 status) returns(uint8)
func (_NetworkDebugContract *NetworkDebugContractSession) SetStatus(status uint8) (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.SetStatus(&_NetworkDebugContract.TransactOpts, status)
}

// SetStatus is a paid mutator transaction binding the contract method 0x2e49d78b.
//
// Solidity: function setStatus(uint8 status) returns(uint8)
func (_NetworkDebugContract *NetworkDebugContractTransactorSession) SetStatus(status uint8) (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.SetStatus(&_NetworkDebugContract.TransactOpts, status)
}

// Trace is a paid mutator transaction binding the contract method 0x3e41f135.
//
// Solidity: function trace(int256 x, int256 y) returns(int256)
func (_NetworkDebugContract *NetworkDebugContractTransactor) Trace(opts *bind.TransactOpts, x *big.Int, y *big.Int) (*types.Transaction, error) {
	return _NetworkDebugContract.contract.Transact(opts, "trace", x, y)
}

// Trace is a paid mutator transaction binding the contract method 0x3e41f135.
//
// Solidity: function trace(int256 x, int256 y) returns(int256)
func (_NetworkDebugContract *NetworkDebugContractSession) Trace(x *big.Int, y *big.Int) (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.Trace(&_NetworkDebugContract.TransactOpts, x, y)
}

// Trace is a paid mutator transaction binding the contract method 0x3e41f135.
//
// Solidity: function trace(int256 x, int256 y) returns(int256)
func (_NetworkDebugContract *NetworkDebugContractTransactorSession) Trace(x *big.Int, y *big.Int) (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.Trace(&_NetworkDebugContract.TransactOpts, x, y)
}

// TraceDifferent is a paid mutator transaction binding the contract method 0x30985bcc.
//
// Solidity: function traceDifferent(int256 x, int256 y) returns(int256)
func (_NetworkDebugContract *NetworkDebugContractTransactor) TraceDifferent(opts *bind.TransactOpts, x *big.Int, y *big.Int) (*types.Transaction, error) {
	return _NetworkDebugContract.contract.Transact(opts, "traceDifferent", x, y)
}

// TraceDifferent is a paid mutator transaction binding the contract method 0x30985bcc.
//
// Solidity: function traceDifferent(int256 x, int256 y) returns(int256)
func (_NetworkDebugContract *NetworkDebugContractSession) TraceDifferent(x *big.Int, y *big.Int) (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.TraceDifferent(&_NetworkDebugContract.TransactOpts, x, y)
}

// TraceDifferent is a paid mutator transaction binding the contract method 0x30985bcc.
//
// Solidity: function traceDifferent(int256 x, int256 y) returns(int256)
func (_NetworkDebugContract *NetworkDebugContractTransactorSession) TraceDifferent(x *big.Int, y *big.Int) (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.TraceDifferent(&_NetworkDebugContract.TransactOpts, x, y)
}

// TraceSubWithCallback is a paid mutator transaction binding the contract method 0x3837a75e.
//
// Solidity: function traceSubWithCallback(int256 x, int256 y) returns(int256)
func (_NetworkDebugContract *NetworkDebugContractTransactor) TraceSubWithCallback(opts *bind.TransactOpts, x *big.Int, y *big.Int) (*types.Transaction, error) {
	return _NetworkDebugContract.contract.Transact(opts, "traceSubWithCallback", x, y)
}

// TraceSubWithCallback is a paid mutator transaction binding the contract method 0x3837a75e.
//
// Solidity: function traceSubWithCallback(int256 x, int256 y) returns(int256)
func (_NetworkDebugContract *NetworkDebugContractSession) TraceSubWithCallback(x *big.Int, y *big.Int) (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.TraceSubWithCallback(&_NetworkDebugContract.TransactOpts, x, y)
}

// TraceSubWithCallback is a paid mutator transaction binding the contract method 0x3837a75e.
//
// Solidity: function traceSubWithCallback(int256 x, int256 y) returns(int256)
func (_NetworkDebugContract *NetworkDebugContractTransactorSession) TraceSubWithCallback(x *big.Int, y *big.Int) (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.TraceSubWithCallback(&_NetworkDebugContract.TransactOpts, x, y)
}

// TraceYetDifferent is a paid mutator transaction binding the contract method 0x58379d71.
//
// Solidity: function traceYetDifferent(int256 x, int256 y) returns(int256)
func (_NetworkDebugContract *NetworkDebugContractTransactor) TraceYetDifferent(opts *bind.TransactOpts, x *big.Int, y *big.Int) (*types.Transaction, error) {
	return _NetworkDebugContract.contract.Transact(opts, "traceYetDifferent", x, y)
}

// TraceYetDifferent is a paid mutator transaction binding the contract method 0x58379d71.
//
// Solidity: function traceYetDifferent(int256 x, int256 y) returns(int256)
func (_NetworkDebugContract *NetworkDebugContractSession) TraceYetDifferent(x *big.Int, y *big.Int) (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.TraceYetDifferent(&_NetworkDebugContract.TransactOpts, x, y)
}

// TraceYetDifferent is a paid mutator transaction binding the contract method 0x58379d71.
//
// Solidity: function traceYetDifferent(int256 x, int256 y) returns(int256)
func (_NetworkDebugContract *NetworkDebugContractTransactorSession) TraceYetDifferent(x *big.Int, y *big.Int) (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.TraceYetDifferent(&_NetworkDebugContract.TransactOpts, x, y)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_NetworkDebugContract *NetworkDebugContractTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _NetworkDebugContract.contract.RawTransact(opts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_NetworkDebugContract *NetworkDebugContractSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.Fallback(&_NetworkDebugContract.TransactOpts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_NetworkDebugContract *NetworkDebugContractTransactorSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.Fallback(&_NetworkDebugContract.TransactOpts, calldata)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_NetworkDebugContract *NetworkDebugContractTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NetworkDebugContract.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_NetworkDebugContract *NetworkDebugContractSession) Receive() (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.Receive(&_NetworkDebugContract.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_NetworkDebugContract *NetworkDebugContractTransactorSession) Receive() (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.Receive(&_NetworkDebugContract.TransactOpts)
}

// NetworkDebugContractCallbackEventIterator is returned from FilterCallbackEvent and is used to iterate over the raw logs and unpacked data for CallbackEvent events raised by the NetworkDebugContract contract.
type NetworkDebugContractCallbackEventIterator struct {
	Event *NetworkDebugContractCallbackEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NetworkDebugContractCallbackEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NetworkDebugContractCallbackEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NetworkDebugContractCallbackEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NetworkDebugContractCallbackEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NetworkDebugContractCallbackEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NetworkDebugContractCallbackEvent represents a CallbackEvent event raised by the NetworkDebugContract contract.
type NetworkDebugContractCallbackEvent struct {
	A   *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterCallbackEvent is a free log retrieval operation binding the contract event 0xb16dba9242e1aa07ccc47228094628f72c8cc9699ee45d5bc8d67b84d3038c68.
//
// Solidity: event CallbackEvent(int256 indexed a)
func (_NetworkDebugContract *NetworkDebugContractFilterer) FilterCallbackEvent(opts *bind.FilterOpts, a []*big.Int) (*NetworkDebugContractCallbackEventIterator, error) {

	var aRule []interface{}
	for _, aItem := range a {
		aRule = append(aRule, aItem)
	}

	logs, sub, err := _NetworkDebugContract.contract.FilterLogs(opts, "CallbackEvent", aRule)
	if err != nil {
		return nil, err
	}
	return &NetworkDebugContractCallbackEventIterator{contract: _NetworkDebugContract.contract, event: "CallbackEvent", logs: logs, sub: sub}, nil
}

// WatchCallbackEvent is a free log subscription operation binding the contract event 0xb16dba9242e1aa07ccc47228094628f72c8cc9699ee45d5bc8d67b84d3038c68.
//
// Solidity: event CallbackEvent(int256 indexed a)
func (_NetworkDebugContract *NetworkDebugContractFilterer) WatchCallbackEvent(opts *bind.WatchOpts, sink chan<- *NetworkDebugContractCallbackEvent, a []*big.Int) (event.Subscription, error) {

	var aRule []interface{}
	for _, aItem := range a {
		aRule = append(aRule, aItem)
	}

	logs, sub, err := _NetworkDebugContract.contract.WatchLogs(opts, "CallbackEvent", aRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NetworkDebugContractCallbackEvent)
				if err := _NetworkDebugContract.contract.UnpackLog(event, "CallbackEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCallbackEvent is a log parse operation binding the contract event 0xb16dba9242e1aa07ccc47228094628f72c8cc9699ee45d5bc8d67b84d3038c68.
//
// Solidity: event CallbackEvent(int256 indexed a)
func (_NetworkDebugContract *NetworkDebugContractFilterer) ParseCallbackEvent(log types.Log) (*NetworkDebugContractCallbackEvent, error) {
	event := new(NetworkDebugContractCallbackEvent)
	if err := _NetworkDebugContract.contract.UnpackLog(event, "CallbackEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NetworkDebugContractCurrentStatusIterator is returned from FilterCurrentStatus and is used to iterate over the raw logs and unpacked data for CurrentStatus events raised by the NetworkDebugContract contract.
type NetworkDebugContractCurrentStatusIterator struct {
	Event *NetworkDebugContractCurrentStatus // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NetworkDebugContractCurrentStatusIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NetworkDebugContractCurrentStatus)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NetworkDebugContractCurrentStatus)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NetworkDebugContractCurrentStatusIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NetworkDebugContractCurrentStatusIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NetworkDebugContractCurrentStatus represents a CurrentStatus event raised by the NetworkDebugContract contract.
type NetworkDebugContractCurrentStatus struct {
	Status uint8
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterCurrentStatus is a free log retrieval operation binding the contract event 0xbea054406fdf249b05d1aef1b5f848d62d902d94389fca702b2d8337677c359a.
//
// Solidity: event CurrentStatus(uint8 indexed status)
func (_NetworkDebugContract *NetworkDebugContractFilterer) FilterCurrentStatus(opts *bind.FilterOpts, status []uint8) (*NetworkDebugContractCurrentStatusIterator, error) {

	var statusRule []interface{}
	for _, statusItem := range status {
		statusRule = append(statusRule, statusItem)
	}

	logs, sub, err := _NetworkDebugContract.contract.FilterLogs(opts, "CurrentStatus", statusRule)
	if err != nil {
		return nil, err
	}
	return &NetworkDebugContractCurrentStatusIterator{contract: _NetworkDebugContract.contract, event: "CurrentStatus", logs: logs, sub: sub}, nil
}

// WatchCurrentStatus is a free log subscription operation binding the contract event 0xbea054406fdf249b05d1aef1b5f848d62d902d94389fca702b2d8337677c359a.
//
// Solidity: event CurrentStatus(uint8 indexed status)
func (_NetworkDebugContract *NetworkDebugContractFilterer) WatchCurrentStatus(opts *bind.WatchOpts, sink chan<- *NetworkDebugContractCurrentStatus, status []uint8) (event.Subscription, error) {

	var statusRule []interface{}
	for _, statusItem := range status {
		statusRule = append(statusRule, statusItem)
	}

	logs, sub, err := _NetworkDebugContract.contract.WatchLogs(opts, "CurrentStatus", statusRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NetworkDebugContractCurrentStatus)
				if err := _NetworkDebugContract.contract.UnpackLog(event, "CurrentStatus", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCurrentStatus is a log parse operation binding the contract event 0xbea054406fdf249b05d1aef1b5f848d62d902d94389fca702b2d8337677c359a.
//
// Solidity: event CurrentStatus(uint8 indexed status)
func (_NetworkDebugContract *NetworkDebugContractFilterer) ParseCurrentStatus(log types.Log) (*NetworkDebugContractCurrentStatus, error) {
	event := new(NetworkDebugContractCurrentStatus)
	if err := _NetworkDebugContract.contract.UnpackLog(event, "CurrentStatus", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NetworkDebugContractEtherReceivedIterator is returned from FilterEtherReceived and is used to iterate over the raw logs and unpacked data for EtherReceived events raised by the NetworkDebugContract contract.
type NetworkDebugContractEtherReceivedIterator struct {
	Event *NetworkDebugContractEtherReceived // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NetworkDebugContractEtherReceivedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NetworkDebugContractEtherReceived)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NetworkDebugContractEtherReceived)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NetworkDebugContractEtherReceivedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NetworkDebugContractEtherReceivedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NetworkDebugContractEtherReceived represents a EtherReceived event raised by the NetworkDebugContract contract.
type NetworkDebugContractEtherReceived struct {
	Sender common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterEtherReceived is a free log retrieval operation binding the contract event 0x1e57e3bb474320be3d2c77138f75b7c3941292d647f5f9634e33a8e94e0e069b.
//
// Solidity: event EtherReceived(address sender, uint256 amount)
func (_NetworkDebugContract *NetworkDebugContractFilterer) FilterEtherReceived(opts *bind.FilterOpts) (*NetworkDebugContractEtherReceivedIterator, error) {

	logs, sub, err := _NetworkDebugContract.contract.FilterLogs(opts, "EtherReceived")
	if err != nil {
		return nil, err
	}
	return &NetworkDebugContractEtherReceivedIterator{contract: _NetworkDebugContract.contract, event: "EtherReceived", logs: logs, sub: sub}, nil
}

// WatchEtherReceived is a free log subscription operation binding the contract event 0x1e57e3bb474320be3d2c77138f75b7c3941292d647f5f9634e33a8e94e0e069b.
//
// Solidity: event EtherReceived(address sender, uint256 amount)
func (_NetworkDebugContract *NetworkDebugContractFilterer) WatchEtherReceived(opts *bind.WatchOpts, sink chan<- *NetworkDebugContractEtherReceived) (event.Subscription, error) {

	logs, sub, err := _NetworkDebugContract.contract.WatchLogs(opts, "EtherReceived")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NetworkDebugContractEtherReceived)
				if err := _NetworkDebugContract.contract.UnpackLog(event, "EtherReceived", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEtherReceived is a log parse operation binding the contract event 0x1e57e3bb474320be3d2c77138f75b7c3941292d647f5f9634e33a8e94e0e069b.
//
// Solidity: event EtherReceived(address sender, uint256 amount)
func (_NetworkDebugContract *NetworkDebugContractFilterer) ParseEtherReceived(log types.Log) (*NetworkDebugContractEtherReceived, error) {
	event := new(NetworkDebugContractEtherReceived)
	if err := _NetworkDebugContract.contract.UnpackLog(event, "EtherReceived", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NetworkDebugContractNoIndexEventIterator is returned from FilterNoIndexEvent and is used to iterate over the raw logs and unpacked data for NoIndexEvent events raised by the NetworkDebugContract contract.
type NetworkDebugContractNoIndexEventIterator struct {
	Event *NetworkDebugContractNoIndexEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NetworkDebugContractNoIndexEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NetworkDebugContractNoIndexEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NetworkDebugContractNoIndexEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NetworkDebugContractNoIndexEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NetworkDebugContractNoIndexEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NetworkDebugContractNoIndexEvent represents a NoIndexEvent event raised by the NetworkDebugContract contract.
type NetworkDebugContractNoIndexEvent struct {
	Sender common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterNoIndexEvent is a free log retrieval operation binding the contract event 0x33bc9bae48dbe1e057f264b3fc6a1dacdcceacb3ba28d937231c70e068a02f1c.
//
// Solidity: event NoIndexEvent(address sender)
func (_NetworkDebugContract *NetworkDebugContractFilterer) FilterNoIndexEvent(opts *bind.FilterOpts) (*NetworkDebugContractNoIndexEventIterator, error) {

	logs, sub, err := _NetworkDebugContract.contract.FilterLogs(opts, "NoIndexEvent")
	if err != nil {
		return nil, err
	}
	return &NetworkDebugContractNoIndexEventIterator{contract: _NetworkDebugContract.contract, event: "NoIndexEvent", logs: logs, sub: sub}, nil
}

// WatchNoIndexEvent is a free log subscription operation binding the contract event 0x33bc9bae48dbe1e057f264b3fc6a1dacdcceacb3ba28d937231c70e068a02f1c.
//
// Solidity: event NoIndexEvent(address sender)
func (_NetworkDebugContract *NetworkDebugContractFilterer) WatchNoIndexEvent(opts *bind.WatchOpts, sink chan<- *NetworkDebugContractNoIndexEvent) (event.Subscription, error) {

	logs, sub, err := _NetworkDebugContract.contract.WatchLogs(opts, "NoIndexEvent")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NetworkDebugContractNoIndexEvent)
				if err := _NetworkDebugContract.contract.UnpackLog(event, "NoIndexEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNoIndexEvent is a log parse operation binding the contract event 0x33bc9bae48dbe1e057f264b3fc6a1dacdcceacb3ba28d937231c70e068a02f1c.
//
// Solidity: event NoIndexEvent(address sender)
func (_NetworkDebugContract *NetworkDebugContractFilterer) ParseNoIndexEvent(log types.Log) (*NetworkDebugContractNoIndexEvent, error) {
	event := new(NetworkDebugContractNoIndexEvent)
	if err := _NetworkDebugContract.contract.UnpackLog(event, "NoIndexEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NetworkDebugContractNoIndexEventStringIterator is returned from FilterNoIndexEventString and is used to iterate over the raw logs and unpacked data for NoIndexEventString events raised by the NetworkDebugContract contract.
type NetworkDebugContractNoIndexEventStringIterator struct {
	Event *NetworkDebugContractNoIndexEventString // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NetworkDebugContractNoIndexEventStringIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NetworkDebugContractNoIndexEventString)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NetworkDebugContractNoIndexEventString)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NetworkDebugContractNoIndexEventStringIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NetworkDebugContractNoIndexEventStringIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NetworkDebugContractNoIndexEventString represents a NoIndexEventString event raised by the NetworkDebugContract contract.
type NetworkDebugContractNoIndexEventString struct {
	Str string
	Raw types.Log // Blockchain specific contextual infos
}

// FilterNoIndexEventString is a free log retrieval operation binding the contract event 0x25b7adba1b046a19379db4bc06aa1f2e71604d7b599a0ee8783d58110f00e16a.
//
// Solidity: event NoIndexEventString(string str)
func (_NetworkDebugContract *NetworkDebugContractFilterer) FilterNoIndexEventString(opts *bind.FilterOpts) (*NetworkDebugContractNoIndexEventStringIterator, error) {

	logs, sub, err := _NetworkDebugContract.contract.FilterLogs(opts, "NoIndexEventString")
	if err != nil {
		return nil, err
	}
	return &NetworkDebugContractNoIndexEventStringIterator{contract: _NetworkDebugContract.contract, event: "NoIndexEventString", logs: logs, sub: sub}, nil
}

// WatchNoIndexEventString is a free log subscription operation binding the contract event 0x25b7adba1b046a19379db4bc06aa1f2e71604d7b599a0ee8783d58110f00e16a.
//
// Solidity: event NoIndexEventString(string str)
func (_NetworkDebugContract *NetworkDebugContractFilterer) WatchNoIndexEventString(opts *bind.WatchOpts, sink chan<- *NetworkDebugContractNoIndexEventString) (event.Subscription, error) {

	logs, sub, err := _NetworkDebugContract.contract.WatchLogs(opts, "NoIndexEventString")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NetworkDebugContractNoIndexEventString)
				if err := _NetworkDebugContract.contract.UnpackLog(event, "NoIndexEventString", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNoIndexEventString is a log parse operation binding the contract event 0x25b7adba1b046a19379db4bc06aa1f2e71604d7b599a0ee8783d58110f00e16a.
//
// Solidity: event NoIndexEventString(string str)
func (_NetworkDebugContract *NetworkDebugContractFilterer) ParseNoIndexEventString(log types.Log) (*NetworkDebugContractNoIndexEventString, error) {
	event := new(NetworkDebugContractNoIndexEventString)
	if err := _NetworkDebugContract.contract.UnpackLog(event, "NoIndexEventString", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NetworkDebugContractNoIndexStructEventIterator is returned from FilterNoIndexStructEvent and is used to iterate over the raw logs and unpacked data for NoIndexStructEvent events raised by the NetworkDebugContract contract.
type NetworkDebugContractNoIndexStructEventIterator struct {
	Event *NetworkDebugContractNoIndexStructEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NetworkDebugContractNoIndexStructEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NetworkDebugContractNoIndexStructEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NetworkDebugContractNoIndexStructEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NetworkDebugContractNoIndexStructEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NetworkDebugContractNoIndexStructEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NetworkDebugContractNoIndexStructEvent represents a NoIndexStructEvent event raised by the NetworkDebugContract contract.
type NetworkDebugContractNoIndexStructEvent struct {
	A   NetworkDebugContractAccount
	Raw types.Log // Blockchain specific contextual infos
}

// FilterNoIndexStructEvent is a free log retrieval operation binding the contract event 0xebe3ff7e2071d351bf2e65b4fccd24e3ae99485f02468f1feecf7d64dc044188.
//
// Solidity: event NoIndexStructEvent((string,uint64,uint256) a)
func (_NetworkDebugContract *NetworkDebugContractFilterer) FilterNoIndexStructEvent(opts *bind.FilterOpts) (*NetworkDebugContractNoIndexStructEventIterator, error) {

	logs, sub, err := _NetworkDebugContract.contract.FilterLogs(opts, "NoIndexStructEvent")
	if err != nil {
		return nil, err
	}
	return &NetworkDebugContractNoIndexStructEventIterator{contract: _NetworkDebugContract.contract, event: "NoIndexStructEvent", logs: logs, sub: sub}, nil
}

// WatchNoIndexStructEvent is a free log subscription operation binding the contract event 0xebe3ff7e2071d351bf2e65b4fccd24e3ae99485f02468f1feecf7d64dc044188.
//
// Solidity: event NoIndexStructEvent((string,uint64,uint256) a)
func (_NetworkDebugContract *NetworkDebugContractFilterer) WatchNoIndexStructEvent(opts *bind.WatchOpts, sink chan<- *NetworkDebugContractNoIndexStructEvent) (event.Subscription, error) {

	logs, sub, err := _NetworkDebugContract.contract.WatchLogs(opts, "NoIndexStructEvent")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NetworkDebugContractNoIndexStructEvent)
				if err := _NetworkDebugContract.contract.UnpackLog(event, "NoIndexStructEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNoIndexStructEvent is a log parse operation binding the contract event 0xebe3ff7e2071d351bf2e65b4fccd24e3ae99485f02468f1feecf7d64dc044188.
//
// Solidity: event NoIndexStructEvent((string,uint64,uint256) a)
func (_NetworkDebugContract *NetworkDebugContractFilterer) ParseNoIndexStructEvent(log types.Log) (*NetworkDebugContractNoIndexStructEvent, error) {
	event := new(NetworkDebugContractNoIndexStructEvent)
	if err := _NetworkDebugContract.contract.UnpackLog(event, "NoIndexStructEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NetworkDebugContractOneIndexEventIterator is returned from FilterOneIndexEvent and is used to iterate over the raw logs and unpacked data for OneIndexEvent events raised by the NetworkDebugContract contract.
type NetworkDebugContractOneIndexEventIterator struct {
	Event *NetworkDebugContractOneIndexEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NetworkDebugContractOneIndexEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NetworkDebugContractOneIndexEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NetworkDebugContractOneIndexEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NetworkDebugContractOneIndexEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NetworkDebugContractOneIndexEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NetworkDebugContractOneIndexEvent represents a OneIndexEvent event raised by the NetworkDebugContract contract.
type NetworkDebugContractOneIndexEvent struct {
	A   *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterOneIndexEvent is a free log retrieval operation binding the contract event 0xeace1be0b97ec11f959499c07b9f60f0cc47bf610b28fda8fb0e970339cf3b35.
//
// Solidity: event OneIndexEvent(uint256 indexed a)
func (_NetworkDebugContract *NetworkDebugContractFilterer) FilterOneIndexEvent(opts *bind.FilterOpts, a []*big.Int) (*NetworkDebugContractOneIndexEventIterator, error) {

	var aRule []interface{}
	for _, aItem := range a {
		aRule = append(aRule, aItem)
	}

	logs, sub, err := _NetworkDebugContract.contract.FilterLogs(opts, "OneIndexEvent", aRule)
	if err != nil {
		return nil, err
	}
	return &NetworkDebugContractOneIndexEventIterator{contract: _NetworkDebugContract.contract, event: "OneIndexEvent", logs: logs, sub: sub}, nil
}

// WatchOneIndexEvent is a free log subscription operation binding the contract event 0xeace1be0b97ec11f959499c07b9f60f0cc47bf610b28fda8fb0e970339cf3b35.
//
// Solidity: event OneIndexEvent(uint256 indexed a)
func (_NetworkDebugContract *NetworkDebugContractFilterer) WatchOneIndexEvent(opts *bind.WatchOpts, sink chan<- *NetworkDebugContractOneIndexEvent, a []*big.Int) (event.Subscription, error) {

	var aRule []interface{}
	for _, aItem := range a {
		aRule = append(aRule, aItem)
	}

	logs, sub, err := _NetworkDebugContract.contract.WatchLogs(opts, "OneIndexEvent", aRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NetworkDebugContractOneIndexEvent)
				if err := _NetworkDebugContract.contract.UnpackLog(event, "OneIndexEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOneIndexEvent is a log parse operation binding the contract event 0xeace1be0b97ec11f959499c07b9f60f0cc47bf610b28fda8fb0e970339cf3b35.
//
// Solidity: event OneIndexEvent(uint256 indexed a)
func (_NetworkDebugContract *NetworkDebugContractFilterer) ParseOneIndexEvent(log types.Log) (*NetworkDebugContractOneIndexEvent, error) {
	event := new(NetworkDebugContractOneIndexEvent)
	if err := _NetworkDebugContract.contract.UnpackLog(event, "OneIndexEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NetworkDebugContractReceivedIterator is returned from FilterReceived and is used to iterate over the raw logs and unpacked data for Received events raised by the NetworkDebugContract contract.
type NetworkDebugContractReceivedIterator struct {
	Event *NetworkDebugContractReceived // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NetworkDebugContractReceivedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NetworkDebugContractReceived)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NetworkDebugContractReceived)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NetworkDebugContractReceivedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NetworkDebugContractReceivedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NetworkDebugContractReceived represents a Received event raised by the NetworkDebugContract contract.
type NetworkDebugContractReceived struct {
	Caller  common.Address
	Amount  *big.Int
	Message string
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterReceived is a free log retrieval operation binding the contract event 0x59e04c3f0d44b7caf6e8ef854b61d9a51cf1960d7a88ff6356cc5e946b4b5832.
//
// Solidity: event Received(address caller, uint256 amount, string message)
func (_NetworkDebugContract *NetworkDebugContractFilterer) FilterReceived(opts *bind.FilterOpts) (*NetworkDebugContractReceivedIterator, error) {

	logs, sub, err := _NetworkDebugContract.contract.FilterLogs(opts, "Received")
	if err != nil {
		return nil, err
	}
	return &NetworkDebugContractReceivedIterator{contract: _NetworkDebugContract.contract, event: "Received", logs: logs, sub: sub}, nil
}

// WatchReceived is a free log subscription operation binding the contract event 0x59e04c3f0d44b7caf6e8ef854b61d9a51cf1960d7a88ff6356cc5e946b4b5832.
//
// Solidity: event Received(address caller, uint256 amount, string message)
func (_NetworkDebugContract *NetworkDebugContractFilterer) WatchReceived(opts *bind.WatchOpts, sink chan<- *NetworkDebugContractReceived) (event.Subscription, error) {

	logs, sub, err := _NetworkDebugContract.contract.WatchLogs(opts, "Received")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NetworkDebugContractReceived)
				if err := _NetworkDebugContract.contract.UnpackLog(event, "Received", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseReceived is a log parse operation binding the contract event 0x59e04c3f0d44b7caf6e8ef854b61d9a51cf1960d7a88ff6356cc5e946b4b5832.
//
// Solidity: event Received(address caller, uint256 amount, string message)
func (_NetworkDebugContract *NetworkDebugContractFilterer) ParseReceived(log types.Log) (*NetworkDebugContractReceived, error) {
	event := new(NetworkDebugContractReceived)
	if err := _NetworkDebugContract.contract.UnpackLog(event, "Received", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NetworkDebugContractThreeIndexAndOneNonIndexedEventIterator is returned from FilterThreeIndexAndOneNonIndexedEvent and is used to iterate over the raw logs and unpacked data for ThreeIndexAndOneNonIndexedEvent events raised by the NetworkDebugContract contract.
type NetworkDebugContractThreeIndexAndOneNonIndexedEventIterator struct {
	Event *NetworkDebugContractThreeIndexAndOneNonIndexedEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NetworkDebugContractThreeIndexAndOneNonIndexedEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NetworkDebugContractThreeIndexAndOneNonIndexedEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NetworkDebugContractThreeIndexAndOneNonIndexedEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NetworkDebugContractThreeIndexAndOneNonIndexedEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NetworkDebugContractThreeIndexAndOneNonIndexedEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NetworkDebugContractThreeIndexAndOneNonIndexedEvent represents a ThreeIndexAndOneNonIndexedEvent event raised by the NetworkDebugContract contract.
type NetworkDebugContractThreeIndexAndOneNonIndexedEvent struct {
	RoundId   *big.Int
	StartedBy common.Address
	StartedAt *big.Int
	DataId    string
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterThreeIndexAndOneNonIndexedEvent is a free log retrieval operation binding the contract event 0x56c2ea44ba516098cee0c181dd9d8db262657368b6e911e83ae0ccfae806c73d.
//
// Solidity: event ThreeIndexAndOneNonIndexedEvent(uint256 indexed roundId, address indexed startedBy, uint256 indexed startedAt, string dataId)
func (_NetworkDebugContract *NetworkDebugContractFilterer) FilterThreeIndexAndOneNonIndexedEvent(opts *bind.FilterOpts, roundId []*big.Int, startedBy []common.Address, startedAt []*big.Int) (*NetworkDebugContractThreeIndexAndOneNonIndexedEventIterator, error) {

	var roundIdRule []interface{}
	for _, roundIdItem := range roundId {
		roundIdRule = append(roundIdRule, roundIdItem)
	}
	var startedByRule []interface{}
	for _, startedByItem := range startedBy {
		startedByRule = append(startedByRule, startedByItem)
	}
	var startedAtRule []interface{}
	for _, startedAtItem := range startedAt {
		startedAtRule = append(startedAtRule, startedAtItem)
	}

	logs, sub, err := _NetworkDebugContract.contract.FilterLogs(opts, "ThreeIndexAndOneNonIndexedEvent", roundIdRule, startedByRule, startedAtRule)
	if err != nil {
		return nil, err
	}
	return &NetworkDebugContractThreeIndexAndOneNonIndexedEventIterator{contract: _NetworkDebugContract.contract, event: "ThreeIndexAndOneNonIndexedEvent", logs: logs, sub: sub}, nil
}

// WatchThreeIndexAndOneNonIndexedEvent is a free log subscription operation binding the contract event 0x56c2ea44ba516098cee0c181dd9d8db262657368b6e911e83ae0ccfae806c73d.
//
// Solidity: event ThreeIndexAndOneNonIndexedEvent(uint256 indexed roundId, address indexed startedBy, uint256 indexed startedAt, string dataId)
func (_NetworkDebugContract *NetworkDebugContractFilterer) WatchThreeIndexAndOneNonIndexedEvent(opts *bind.WatchOpts, sink chan<- *NetworkDebugContractThreeIndexAndOneNonIndexedEvent, roundId []*big.Int, startedBy []common.Address, startedAt []*big.Int) (event.Subscription, error) {

	var roundIdRule []interface{}
	for _, roundIdItem := range roundId {
		roundIdRule = append(roundIdRule, roundIdItem)
	}
	var startedByRule []interface{}
	for _, startedByItem := range startedBy {
		startedByRule = append(startedByRule, startedByItem)
	}
	var startedAtRule []interface{}
	for _, startedAtItem := range startedAt {
		startedAtRule = append(startedAtRule, startedAtItem)
	}

	logs, sub, err := _NetworkDebugContract.contract.WatchLogs(opts, "ThreeIndexAndOneNonIndexedEvent", roundIdRule, startedByRule, startedAtRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NetworkDebugContractThreeIndexAndOneNonIndexedEvent)
				if err := _NetworkDebugContract.contract.UnpackLog(event, "ThreeIndexAndOneNonIndexedEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseThreeIndexAndOneNonIndexedEvent is a log parse operation binding the contract event 0x56c2ea44ba516098cee0c181dd9d8db262657368b6e911e83ae0ccfae806c73d.
//
// Solidity: event ThreeIndexAndOneNonIndexedEvent(uint256 indexed roundId, address indexed startedBy, uint256 indexed startedAt, string dataId)
func (_NetworkDebugContract *NetworkDebugContractFilterer) ParseThreeIndexAndOneNonIndexedEvent(log types.Log) (*NetworkDebugContractThreeIndexAndOneNonIndexedEvent, error) {
	event := new(NetworkDebugContractThreeIndexAndOneNonIndexedEvent)
	if err := _NetworkDebugContract.contract.UnpackLog(event, "ThreeIndexAndOneNonIndexedEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NetworkDebugContractThreeIndexEventIterator is returned from FilterThreeIndexEvent and is used to iterate over the raw logs and unpacked data for ThreeIndexEvent events raised by the NetworkDebugContract contract.
type NetworkDebugContractThreeIndexEventIterator struct {
	Event *NetworkDebugContractThreeIndexEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NetworkDebugContractThreeIndexEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NetworkDebugContractThreeIndexEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NetworkDebugContractThreeIndexEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NetworkDebugContractThreeIndexEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NetworkDebugContractThreeIndexEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NetworkDebugContractThreeIndexEvent represents a ThreeIndexEvent event raised by the NetworkDebugContract contract.
type NetworkDebugContractThreeIndexEvent struct {
	RoundId   *big.Int
	StartedBy common.Address
	StartedAt *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterThreeIndexEvent is a free log retrieval operation binding the contract event 0x5660e8f93f0146f45abcd659e026b75995db50053cbbca4d7f365934ade68bf3.
//
// Solidity: event ThreeIndexEvent(uint256 indexed roundId, address indexed startedBy, uint256 indexed startedAt)
func (_NetworkDebugContract *NetworkDebugContractFilterer) FilterThreeIndexEvent(opts *bind.FilterOpts, roundId []*big.Int, startedBy []common.Address, startedAt []*big.Int) (*NetworkDebugContractThreeIndexEventIterator, error) {

	var roundIdRule []interface{}
	for _, roundIdItem := range roundId {
		roundIdRule = append(roundIdRule, roundIdItem)
	}
	var startedByRule []interface{}
	for _, startedByItem := range startedBy {
		startedByRule = append(startedByRule, startedByItem)
	}
	var startedAtRule []interface{}
	for _, startedAtItem := range startedAt {
		startedAtRule = append(startedAtRule, startedAtItem)
	}

	logs, sub, err := _NetworkDebugContract.contract.FilterLogs(opts, "ThreeIndexEvent", roundIdRule, startedByRule, startedAtRule)
	if err != nil {
		return nil, err
	}
	return &NetworkDebugContractThreeIndexEventIterator{contract: _NetworkDebugContract.contract, event: "ThreeIndexEvent", logs: logs, sub: sub}, nil
}

// WatchThreeIndexEvent is a free log subscription operation binding the contract event 0x5660e8f93f0146f45abcd659e026b75995db50053cbbca4d7f365934ade68bf3.
//
// Solidity: event ThreeIndexEvent(uint256 indexed roundId, address indexed startedBy, uint256 indexed startedAt)
func (_NetworkDebugContract *NetworkDebugContractFilterer) WatchThreeIndexEvent(opts *bind.WatchOpts, sink chan<- *NetworkDebugContractThreeIndexEvent, roundId []*big.Int, startedBy []common.Address, startedAt []*big.Int) (event.Subscription, error) {

	var roundIdRule []interface{}
	for _, roundIdItem := range roundId {
		roundIdRule = append(roundIdRule, roundIdItem)
	}
	var startedByRule []interface{}
	for _, startedByItem := range startedBy {
		startedByRule = append(startedByRule, startedByItem)
	}
	var startedAtRule []interface{}
	for _, startedAtItem := range startedAt {
		startedAtRule = append(startedAtRule, startedAtItem)
	}

	logs, sub, err := _NetworkDebugContract.contract.WatchLogs(opts, "ThreeIndexEvent", roundIdRule, startedByRule, startedAtRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NetworkDebugContractThreeIndexEvent)
				if err := _NetworkDebugContract.contract.UnpackLog(event, "ThreeIndexEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseThreeIndexEvent is a log parse operation binding the contract event 0x5660e8f93f0146f45abcd659e026b75995db50053cbbca4d7f365934ade68bf3.
//
// Solidity: event ThreeIndexEvent(uint256 indexed roundId, address indexed startedBy, uint256 indexed startedAt)
func (_NetworkDebugContract *NetworkDebugContractFilterer) ParseThreeIndexEvent(log types.Log) (*NetworkDebugContractThreeIndexEvent, error) {
	event := new(NetworkDebugContractThreeIndexEvent)
	if err := _NetworkDebugContract.contract.UnpackLog(event, "ThreeIndexEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NetworkDebugContractTwoIndexEventIterator is returned from FilterTwoIndexEvent and is used to iterate over the raw logs and unpacked data for TwoIndexEvent events raised by the NetworkDebugContract contract.
type NetworkDebugContractTwoIndexEventIterator struct {
	Event *NetworkDebugContractTwoIndexEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NetworkDebugContractTwoIndexEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NetworkDebugContractTwoIndexEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NetworkDebugContractTwoIndexEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NetworkDebugContractTwoIndexEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NetworkDebugContractTwoIndexEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NetworkDebugContractTwoIndexEvent represents a TwoIndexEvent event raised by the NetworkDebugContract contract.
type NetworkDebugContractTwoIndexEvent struct {
	RoundId   *big.Int
	StartedBy common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterTwoIndexEvent is a free log retrieval operation binding the contract event 0x33b47a1cd66813164ec00800d74296f57415217c22505ee380594a712936a0b5.
//
// Solidity: event TwoIndexEvent(uint256 indexed roundId, address indexed startedBy)
func (_NetworkDebugContract *NetworkDebugContractFilterer) FilterTwoIndexEvent(opts *bind.FilterOpts, roundId []*big.Int, startedBy []common.Address) (*NetworkDebugContractTwoIndexEventIterator, error) {

	var roundIdRule []interface{}
	for _, roundIdItem := range roundId {
		roundIdRule = append(roundIdRule, roundIdItem)
	}
	var startedByRule []interface{}
	for _, startedByItem := range startedBy {
		startedByRule = append(startedByRule, startedByItem)
	}

	logs, sub, err := _NetworkDebugContract.contract.FilterLogs(opts, "TwoIndexEvent", roundIdRule, startedByRule)
	if err != nil {
		return nil, err
	}
	return &NetworkDebugContractTwoIndexEventIterator{contract: _NetworkDebugContract.contract, event: "TwoIndexEvent", logs: logs, sub: sub}, nil
}

// WatchTwoIndexEvent is a free log subscription operation binding the contract event 0x33b47a1cd66813164ec00800d74296f57415217c22505ee380594a712936a0b5.
//
// Solidity: event TwoIndexEvent(uint256 indexed roundId, address indexed startedBy)
func (_NetworkDebugContract *NetworkDebugContractFilterer) WatchTwoIndexEvent(opts *bind.WatchOpts, sink chan<- *NetworkDebugContractTwoIndexEvent, roundId []*big.Int, startedBy []common.Address) (event.Subscription, error) {

	var roundIdRule []interface{}
	for _, roundIdItem := range roundId {
		roundIdRule = append(roundIdRule, roundIdItem)
	}
	var startedByRule []interface{}
	for _, startedByItem := range startedBy {
		startedByRule = append(startedByRule, startedByItem)
	}

	logs, sub, err := _NetworkDebugContract.contract.WatchLogs(opts, "TwoIndexEvent", roundIdRule, startedByRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NetworkDebugContractTwoIndexEvent)
				if err := _NetworkDebugContract.contract.UnpackLog(event, "TwoIndexEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTwoIndexEvent is a log parse operation binding the contract event 0x33b47a1cd66813164ec00800d74296f57415217c22505ee380594a712936a0b5.
//
// Solidity: event TwoIndexEvent(uint256 indexed roundId, address indexed startedBy)
func (_NetworkDebugContract *NetworkDebugContractFilterer) ParseTwoIndexEvent(log types.Log) (*NetworkDebugContractTwoIndexEvent, error) {
	event := new(NetworkDebugContractTwoIndexEvent)
	if err := _NetworkDebugContract.contract.UnpackLog(event, "TwoIndexEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
